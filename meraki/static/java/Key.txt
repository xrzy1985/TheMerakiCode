Java OOP Tutorial Consolidation

---------------------------------------------------------
Java Tutorial
---------------------------------------------------------
1. Syntax
2. User Input
3. Conditional Statements
4. Java Looping
5. Methods and Fields
6. Exception Handling
7. Java Class and OOP Principles
8. Logic in Java Programming
9. Arrays in Java
10. N/A
11. Array Lists
12. Linked Lists
13. String and StringBuilder
14. Polymorphism and Inheritance
15. Interfaces and Abstract Classes
16. Object and Class class
17. Threads
18. Threads 2
19. Regular Expressions
20. Java Swing 1
21. Java Swing 2
22. Java Swing 3
23. Java Swing 4
24. Java Swing 5
25. Java Swing 6
26. Java Swing 7
27. Java Swing 8
28. Swing Layout Managers
29. Swing Layout Managers 2
30. Swing Layout Managers 3
31. File Class
32. Read and Write Files
33. Read and Write Binary Streams 
34. Java and Databases
35. SQL : Sabermetrics Data
36. JTables and MySQL
37. JTables and MySQL 2
38. JTables and MySQL 3
39. Swing and JEditorPane
40. JApplets and More
---------------------------------------------
Coming Soon
---------------------------------------------
41. Eclipse and Java Servlets
42. Eclipse and Java Servlets 2
43. Java Server Pages
44. Parsing XML
45. XML and Path
46. Read and Write XML Files
47. Draw 2D Graphics

---------------------------------------------------------
Additional Java Tutorial/Files
---------------------------------------------------------

=========================================================================== Tutorial 1
// Inside java, everything is a class or an object
// public class defines all the attributes, variables, 
// data structures, functions, methods, or additional functionality

// public means everyone should be able to access it

public class tutorial1 
{
	// public allows all classes to use this function
	// static only a class can call for this function, variable, etc to execute
	// 		the class main will be called/used by helloWorld
	// void means the function does not return any values when execution is finished
	// (String[]args) means every main function must accept an array of string objects
	
	// the static variable will be able to be used by the main function since its static
	// the string gamerTag holds the string of characters xRzy
	static String gamerTag = "xRzy";
	
	// PIE is a double, but could be cast as a float as well
	// Double is larger and more precise than a float
	static final double PIE = 3.141529;
	
	public static void main (String[]args)
	{
		// The first two will print on the same line
		
		System.out.print("James ");
		System.out.print("Patterson; " + gamerTag + "\n");
		
		// The \n will drop to the next line
		
		System.out.println("\nHello, World!");
		
		System.out.println("\nPi: " +  PIE);
		
		// a integer variable is created and assigned the value of 21
		// this is a DECLARATION STATEMENT
		
		int randomInteger = 21;
		
		System.out.println("\nOne must be " + randomInteger + " to drink legally.");
		
		// another int is created using the first variable minus 3
		// this is known as a EXPRESSION STATEMENT
		
		int randomInteger2 = randomInteger -3; 
		
		System.out.println("\nOne must be " + randomInteger2 + " to smoke legally.");
		
		// a byte data type cannot be larger than 127 and a minimum of -128
		byte bigByte = 127;
		
		// a short data type cannot be larger than 32767 and a minimum of -32768
		short smallShort = 32767; 
		
		System.out.println("\n" + smallShort);
		
		int bigInt = 2100000000;
		
		System.out.println("\n" + bigInt);
		
		// a long must end in a L
		long bigLong = 920000000000000000L;
		
		System.out.println("\n" + bigLong);
		
		// a float variable is a long winded double variable
		// it is machine dependant
		float bigFloat = 3.14F;
		
		System.out.println("\n" + bigFloat);
		
		double bigDouble = 3.143425352365645634563456;
		
		System.out.println("\n" + bigDouble);
		
		System.out.print("\nThe largest float your machine can create is: ");
		
		System.out.print(Float.MAX_VALUE);
		
		System.out.print("\nThe largest double your machine can create is: ");
		
		System.out.print(Double.MAX_VALUE);
		
		// boolean variables are either true or false
		// they cannot hold any other type of input
		
		boolean tF = true;
		
		System.out.println("\n" + tF);
		
		// a char is just a character 
		char badge1 = 74;		//74 is the character code for J
		char badge2 = 'P';
		char badge3 = '8';
		char badge4 = '5';
		String badge = "Tag: ";
		
		// Escaped Characters
		// \f \b \n \r \t \" \' \\
		// the \ must be used before hand
		// and they need to be inclosed in a ''
		
		char escaped = '\n';
		
		System.out.println(escaped + badge + badge1 + badge2 + badge3 + badge4);
		
		String sentence1 = escaped + "This is my first sentence, ";
		
		String sentence2 = "but it will  not be my last";
		
		System.out.println(sentence1 + sentence2);
		
		// To convert any of the other types to a string
		// you must cast the variable as a string
		
		String byteString = Byte.toString(bigByte);
		
		System.out.println(escaped + bigByte);
		
		System.out.println(escaped + byteString);
		
		double variable1 = 17.432;
		int doubleToInt = (int) variable1;
		
		System.out.println(escaped + doubleToInt);
		
		
		System.out.println("\nGoodbye, World!");

		// println will print on a new line each time
	}
}
=========================================================================== Tutorial HelloWorld.java
//Inside java, everything is a class or an object
//public class defines all the attributes, variables, 
//data structures, functions, methods, or additional functionality
//public means everyone should be able to access it

public class HelloWorld
{
	// public allows all classes to use this function
	// static only a class can call for this function, variable, etc to execute
	// the class main will be called/used by helloWorld
	// void means the function does not return any values when execution is finished
	// (String[]args) means every main function must accept an array of string objects
	
	// the static variable will be able to be used by the main function since its static
	// the string gamerTag holds the string of characters xRzy
	
	static String hackerTag = "xRzy";

	public static void main(String[] args)
	{
        System.out.println("Hello World, my name is " + hackerTag + ".");
	}

}
=========================================================================== Tutorial 2
import java.util.Scanner;

public class tutorial2 
{
	static Scanner userInput = new Scanner(System.in);
	
	public static void main (String[]args)
	{
		
		System.out.print("Your name is: ");
		
		if (userInput.hasNext())
		{
			String name = userInput.nextLine();
			System.out.println("\nThe name you entered is: " + name);
		}
		
		System.out.print("===========================================\n");
		
		System.out.print("Your age is: ");
		
		if (userInput.hasNextInt())
		{
			int age = userInput.nextInt();
			
			System.out.println("\nThe age you entered is: " + age);
			
			int doubleAge = age + age;
			
			System.out.println("Double your age: " + doubleAge);
			
			System.out.println("Minus 2 from your age: " + (age-2));
			
			System.out.println("Square your age: " + (age*age));
			
			System.out.println("Double your age then divide by 4: " + ((age*4)/2));
			
			System.out.println("Modolus your age: " + (age % 2));
			
			age = age - 10;
			
			System.out.println(age);
			
			age += 10;
			
			System.out.println(age);
			
			age -= 10;
			
			System.out.println(age);
			
			age--;
			
			System.out.println(age);
			
			age++;
			
			System.out.println(age);
			
			int absAge = Math.abs(age);
			
			System.out.println(absAge);
			
			int temp = 10;
			
			int whichIsBigger = Math.max(age,  temp);
			
			System.out.println(whichIsBigger);
			
			int whichIsSmaller = Math.min(age, temp);
			
			System.out.println(whichIsSmaller);
			
			double randomNumber = (double) (Math.random() * 3.14);
			
			System.out.println("Random Double: " + randomNumber);
		}
		else
		{
			System.out.println("Please, enter a proper response, mate.");
		}
		
		
		
	}
	
}

=========================================================================== Tutorial 3
public class tutorial3 
{

	public static void main(String[] args) 
	{
		
		double ranNum = (double) (Math.random() * 3.145789);
		
		/*	Relational Operators
		 * 	>	Greater than
		 * 	< 	Less Than
		 * 	==	Equals to
		 * 	!= 	Not Equal To
		 * 	>=	Greater than or equal
		 * 	<= 	Less than or equal
		 */
		
		if (ranNum < 24)
		{
			System.out.println("The random number is less than 24");
		}
		
		System.out.println("The random number is: " + ranNum);
		
		if (ranNum < 1)
		{
			System.out.println("The random number is less than 1");
		}
		else if (ranNum > 2)
		{
			System.out.println("The number is greater than 2");
		}
		
		System.out.println("The random number is: " + ranNum);
		
		
		/*	Logical Operators
		 * 	!	Flips the value of the boolean variable
		 * 	&	Returns true if boolean values of (a,b) are both true
		 * 	&&	Returns true if boolean value of (a,b) are both true
		 * 	|	Returns true if one or both boolean values of (a,b) are true
		 * 	||	
		 * 	^	Returns true if 1 is true and 1 is false from (a,b)
		 */
		
		if (!(false))		// if !(true) is used, its dead code
		{
			System.out.println("I turned false into true");
		}
		
		if (!(false) && (true))
		{
			System.out.println("Both are true");
		}
		
		if ((false) || (true))
		{
			System.out.println("At least one is true");
		}
		
		if ((false) ^ (true))
		{
			System.out.println("True vs. False");
		}
		
		int val1 = 1;		
		int val2 = 2;
		
		// If val1 is > val2 the statement will return a true
		// and val1 is will assigned to the biggestValue
		// but val2 will be assigned to the biggestValue if 
		// the first statement returns false, which it will
		
		int biggestValue = (val1 > val2) ? val1 : val2;
		
		System.out.println(biggestValue);
		
		char myGrade = 'd';
		
		//break; placed anywhere in a switch will automatically
		// stop evaluating and break out
		
		switch(myGrade)
		{
		case 'a':			// putting both the a and A will allow
		case 'A':			// the program to grab both
			System.out.println("Awesome");
			break;
		case 'b':			// One could cast all input to upper
		case 'B':			// to save some time and code
			System.out.println("Good");
			break;
		case 'c':
		case 'C':
			System.out.println("You Can Do BETTER");
			break;
		case 'd':
		case 'D':
			System.out.println("Welcome to McDonalds");
			break;
		case 'f':
		case 'F':		
			System.out.println("Suck Less");
			break;
		default:
			System.out.println("Something went wrong");
			break;
		}		
		
	}

}

=========================================================================== Tutorial 4
import java.util.Scanner;

public class tutorial4 
{
	
	static Scanner uI = new Scanner(System.in);

	public static void main(String[] args) 
	{
		
		// The following is a loop structure that will
		// start at 1 and print each value until 15 is reached
		// While loops are great for when you know the exact 
		// numbers you need to stop on

		int i = 1;
		
		while (i <= 20)
		{
			
			if (i == 5)
			{
				i+=1;
				// Continue will just pick the loop up
				// where it left off
				continue;
			}
			
			System.out.println(i);
			i++;
			
			if((i%2) == 0)
			{
				i++;
			}
			
			if (i > 15)
			{
				break;
			}
			
		}

		System.out.println("Outside");
		
		double myPi = 4.0;
		
		double j = 3.0;
		
		while(j < 8001)
		{
			myPi = myPi - (4/j) + (4/(j+2));
			j += 4; 
			System.out.println(myPi);
			
		}
		
		System.out.println("Real Value of Pi: " + Math.PI);		
		
		String contYorN = "Y";
		
		int k = 11; 
		
		while (contYorN.equalsIgnoreCase("y"))
		{
			System.out.println(k);
			System.out.print("Continue or Nah?");
			contYorN = uI.nextLine();
			k++;
		}
		
		// A for loop will loop through as many times as 
		// you set the variable a for. If a = 10; the for
		// loop will do whatever is inside the loop for 10
		// times
		
		for (int a = 10; a >= 1; a--)
		{
			System.out.print(a);
		}
		
	}

}

=========================================================================== Tutorial 5
public class tutorial5 
{
	// Class variable
	static double myPI = 3.14159; 
	
	static int randomNumber;

	public static void main(String[] args) 
	{
		overrideNumbers(1);		
		
		System.out.println("Global: " + myPI);
		
		System.out.println("The numbers 2 + 4 = " + addNumbers(2,4));
		
		int d = 5; 
		
		// This is passing the value
		// It is the same as putting 5 instead of d inside the ()
		tryToChange(d);
		
		//This will print out the original int variable d
		System.out.println("Main d: " + d);
		
		System.out.println("Random Number: " + getRandomNumber());
		
	}
		// accessModifier static returnType methodName ()
		
		public static int overrideNumbers(int a)
		{
			// This is a local variable
			// This is only accessible within the method
			// it is defined
			double smallPI = 3.14;
			
			// By creating the myPI variable within the method
			// You are effectively overriding the global variable
			// but you do not replace the original value, only the 
			// value while it is within the method
			double myPI = 3.0;
			
			// if you were to get rid of the double and write the code
			// myPI = myPI + 3; 
			// you will replace the value for myPI 
			// Not just override the value for the method
			
			System.out.println("Local Override: " + myPI);
			System.out.println("Local: " + smallPI);
			
			return a;			
		}
		
		public static int addNumbers(int a, int b)
		{
			int c = a + b;
			return c;
		}
		
		public static void tryToChange(int d)
		{
			// These are local variables 
			// They are not changing the original value of d
			d = d+1;
			// This will print d+1
			System.out.println("tryToChange d: " + d);
			
		}
		
		public static int getRandomNumber()
		{
			randomNumber = (int) (Math.random()*51);
			return randomNumber;
		}
}

=========================================================================== Tutorial 6
import java.io.*;
import java.util.InputMismatchException;
import java.util.Scanner;

public class tutorial6 
{
	
	static Scanner userInput = new Scanner(System.in);

	public static void main(String[] args) throws FileNotFoundException, IOException 
	{
		divideByZero(23);
		
		System.out.println("How old are you?");
		
		int age = checkAge();
		
		if (age != 0)
		{
			System.out.println("You are " + age + " years old");
		}
		
		getFile("./something.txt");
	}
	
	public static void divideByZero(int a)
	{
		try
		{
			System.out.println(a/0);
		}
		catch (ArithmeticException e)
		{
			System.out.println("You cannot divide by zero");
			System.out.println(e.getMessage());
			System.out.println(e.toString());
			e.printStackTrace();
		}		
	}
		
		public static int checkAge()
		{
			try
			{
				return userInput.nextInt();
			}
			catch (InputMismatchException e)
			{
				userInput.next();
				System.out.println("That is not a whole number. ");
				return 0;
			}
		}
		
		public static void getFile(String fileName) throws FileNotFoundException, IOException
		{
			try 
			{
				FileInputStream file = new FileInputStream(fileName);
			} 
			catch (FileNotFoundException e) 
			{
				System.out.println("That file does not exist.");
			}
			catch (IOException e)
			{
				System.out.println("Unknown IO Error");
			}
			catch(Exception e)
			{
				System.out.println("Some error has occurred.");
			}
			finally
			{
				System.out.println("Finally will always execute, no matter what. ");
			}
		}
	
	

}

=========================================================================== Tutorial 7
// You can place multiple classes within a file
// There can only be one public class though
// The other classes must not be public
public class tutorial7 
{
	// A defined constant String
	public final String TOMBSTONE = "Here Lies the Deceased Monster";
	
	// Fields, or otherwise known as class variables
	
	private int health = 500;
	private int attack = 25;
	private int movement = 5;
	private int xPosition = 0;
	private int yPosition = 0;
	private boolean isAlive = true;
	
	public String monsterName = "Big Monster";
	
	// Accessor methods; they have access to the private fields
	public int getHealth()
	{
		return health;
	}
	
	public int getAttack()
	{
		return attack;
	}
	
	public int getMovement()
	{
		return movement;
	}
	
	public int getXPosition()
	{
		return xPosition;
	}
	
	public int getYPosition()
	{
		return yPosition;
	}
	
	public boolean getIsAlive()
	{
		return isAlive;
	}
	
	public void setHealth (int decreaseHealth)
	{
		health = health - decreaseHealth;
		
		if (health <= 0)
		{
			isAlive = false;
		}
	}
	
	// This method will overload the setHealth method
	// if a double data type is sent instead of an int
	// the proper thing to do is write methods for each
	// data type to be handled individually.
	// think about the variables being passed to the
	// method, not the return type
	public void setHealth(double decreaseHealth)
	{
		int decreased = (int) decreaseHealth;
		health = health - decreased;
		
		if (health <= 0)
		{
			isAlive = false;
		}
	}
	
	public void setHealth(float decreaseHealth)
	{
		int decreased = (int) decreaseHealth;
		health = health - decreased;
		
		if (health <= 0)
		{
			isAlive = false;
		}
	}
	
	public void setHealth(long decreaseHealth)
	{
		int decreased = (int) decreaseHealth;
		health = health - decreased;
		
		if (health <= 0)
		{
			isAlive = false;
		}
	}
	
	// Constructor Methods
	// must have the same name as your class
	// cannot have a return type of any kind... so no void
	// The constructor method is the first method that is 
	// called once an object has been created
	public tutorial7(int newHealth, int newAttack, int newMovement)
	{
		// this is a reference to the actual object's variables
		this.health = newHealth;
		this.attack = newAttack;
		this.movement = newMovement;
	}
	
	// Default constructor
	// The method exists and does nothing at all
	public tutorial7 ()
	{
		
	}

	public static void main(String[] args) 
	{
		// The following will create a tutorial7 object
		// named James, and will print out the attack
		// attribute connected to the int attack.
		// This will work with the private variable
		// since you are still working within the 
		// tutorial7 class
		
		tutorial7 James = new tutorial7();
		
		System.out.println(James.attack);
	}

}

-------------------------------------------------------------
	Part 2
-------------------------------------------------------------

public class tutorial7Part2 
{
	
	// It is important to understand that you can use methods and other
	// information stored within other java files
	// You just need to understand how to access them and how to keep
	// The information private

	public static void main(String[] args) 
	{
		tutorial7 Jim = new tutorial7();
		
		Jim.monsterName = "Jim";
		
		// You can not call Jim.attack
		// The attack int variable is set to private
		// You must be within the original class to access a private field
		// You must write a accessor method to access the private field
		// and the accessor method can then return the attack type to
		// the outside class
		
		System.out.println(Jim.monsterName + " has a " + Jim.getAttack() + "hp attack.");
	}

}
=========================================================================== Tutorial 8
import java.util.Arrays;

// You can place multiple classes within a file
// There can only be one public class though
// The other classes must not be public
public class Monsters 
{
	static char[][] battleArena = new char[10][10];
	
	public static void buildBattleArena()
	{	// The following code will loop through
		// the multi-dimensional array we created 
		// and fill each individual spot in the
		// array with a #
		
		for(char[] row : battleArena)
		{
			Arrays.fill(row,  '#');
		}
	}
	
	public void drawArena()
	{
		int a = 1;
		// This will create the top of the board
		while(a <= 30){System.out.print('-'); a++;}
		System.out.println();
		//
		for (int i = 0; i < battleArena.length; i++)
		{
			for (int j = 0; j < battleArena.length; j++)
			{
				System.out.print("|" + battleArena[i][j] + "|");
			}
			System.out.println();
		}
		int b = 1;
		// This will create the top of the board
		while(b <= 30){System.out.print('-'); a++;}
		System.out.println();
	}
	
	// A defined constant String
	// a constant is defined with the final keyword
	public final String TOMBSTONE = "Here Lies the Deceased Monster";
	
	// Fields, or otherwise known as class variables
	
	private int health = 500;
	private int attack = 25;
	private int movement = 5;
	
	
	private boolean isAlive = true;
	
	public String monsterName = "Big Monster";
	public char namedCharacter1 = 'B';
	public int xPosition = 0;
	public int yPosition = 0;
	public static int numberOfMonsters = 0;
	
	// Accessor methods; they have access to the private fields
	public int getHealth()
	{
		return health;
	}
	
	public int getAttack()
	{
		return attack;
	}
	
	public int getMovement()
	{
		return movement;
	}
	
	public int getXPosition()
	{
		return xPosition;
	}
	
	public int getYPosition()
	{
		return yPosition;
	}
	
	public boolean getIsAlive()
	{
		return isAlive;
	}
	
	public void setHealth (int decreaseHealth)
	{
		health = health - decreaseHealth;
		
		if (health <= 0)
		{
			isAlive = false;
		}
	}
	
	// This method will overload the setHealth method
	// if a double data type is sent instead of an int
	// the proper thing to do is write methods for each
	// data type to be handled individually.
	// think about the variables being passed to the
	// method, not the return type
	public void setHealth(double decreaseHealth)
	{
		int decreased = (int) decreaseHealth;
		health = health - decreased;
		
		if (health <= 0)
		{
			isAlive = false;
		}
	}
	
	public void setHealth(float decreaseHealth)
	{
		int decreased = (int) decreaseHealth;
		health = health - decreased;
		
		if (health <= 0)
		{
			isAlive = false;
		}
	}
	
	public void setHealth(long decreaseHealth)
	{
		int decreased = (int) decreaseHealth;
		health = health - decreased;
		
		if (health <= 0)
		{
			isAlive = false;
		}
	}
	
	// Constructor Methods
	// must have the same name as your class
	// cannot have a return type of any kind... so no void
	// The constructor method is the first method that is 
	// called once an object has been created
	public Monsters(int newHealth, int newAttack, int newMovement, String newName)
	{
		// this is a reference to the actual object's variables
		// this.objectFieldName = attributeFieldName
		this.health = newHealth;
		this.attack = newAttack;
		this.movement = newMovement;
		this.monsterName = newName;
		
		int maxXBoardSpaces = battleArena.length -1;
		int maxYBoardSpaces = battleArena[0].length -1;
		
		int randNumX, randNumY;
		
		do
		{
			randNumX = (int) (Math.random() * maxXBoardSpaces);
			randNumY = (int) (Math.random() * maxYBoardSpaces);
		}
		while (battleArena[randNumX][randNumY] != '#');
		
		this.xPosition = randNumX;
		this.yPosition = randNumY;
		
		this.namedCharacter1 = this.monsterName.charAt(0);
		
		battleArena[this.yPosition][this.xPosition] = this.namedCharacter1;
		
		numberOfMonsters++;
	}
	
	// Default constructor
	// The method exists and does nothing at all
	public Monsters ()
	{
		numberOfMonsters++;
	}

	public static void main(String[] args) 
	{
		// The following will create a tutorial7 object
		// named James, and will print out the attack
		// attribute connected to the int attack.
		// This will work with the private variable
		// since you are still working within the 
		// tutorial7 class
		
		Monsters James = new Monsters();
		
		System.out.println(James.attack);
	}

}
=========================================================================== Tutorial 9
import java.util.Arrays;

public class tutorial9 
{

	public static void main(String[] args) 
	{
		// An array is an object
		// Once you declare how large the array is
		// You can not change it due to being fixed size
		// Arrays are storage with each cell assigned an index
		// Arrays can only hold one type of data type
		
		// dataType[] arrayName;
		// arrayName = new dataType[size];
		// Initialize the array then declare the size
		int[] intArray;		
		intArray = new int[7];
		
		// or you can do it all in one line
		int[] integerArray = new int[10];		
		
		// Arrays start indexing at 0
		// So, If your array is size 7
		// the array index will be 0, 1, 2, 3, 4, 5, 6
		integerArray[0] = 1;
		
		// This is how to create a string array
		String[] stringArray = {"Hello World","This is James"};
		
		System.out.println(Arrays.toString(stringArray));
		
		// The following code will help you visualize what an array
		// Looks like
		// The loop will add actual int values to our array
		// until the end of the arrays length is reached
		for(int i = 0; i < intArray.length; i++)
		{
			intArray[i] = i;
		}
		
		int a = 1;
		while(a <= 35){System.out.print('-');a++;}
		System.out.println();
		
		// This will loop through the array and
		// print out to the screen what is inside
		// each index of the array
		for(int j = 0; j < intArray.length; j++)
		{
			System.out.print("|" + j + " ");
		}
		
		a = 1;
		System.out.println("|");
		while(a <= 35){System.out.print('-');a++;}
		
		System.out.println();
		
		// Arrays can be multidimensional arrays
		// The array will hold two sets of information
		// [a][b] are both storage for the array
		/*	|a,b |
		 * 	|0,0 |0,1 |0,2 |0,3 |0,4 |
			|1,0 |1,1 |1,2 |1,3 |1,4 |
			|2,0 |2,1 |2,2 |2,3 |2,4 |
			|3,0 |3,1 |3,2 |3,3 |3,4 |
			|4,0 |4,1 |4,2 |4,3 |4,4 |
		 */
		
		String[][] multiArray = new String[5][5];
		
		a = 1;
		while(a <= 35){System.out.print('-');a++;}
		System.out.println();
		
		for(int i = 0; i < multiArray.length; i++)
		{
			for(int j = 0; j < multiArray[i].length; j++)
			{
				multiArray[i][j] = i + "," + j;
			}
		}
		
		for(int i = 0; i < multiArray.length; i++)
		{
			for(int j = 0; j < multiArray[i].length; j++)
			{
				System.out.print("|" + multiArray[i][j] + " ");
			}
			
			System.out.println("|");
		}
		
		a = 1;
		while(a <= 35){System.out.print('-');a++;}
		System.out.println();
		
		// You can use the "enhanced" for loop
		// to print out values within an array
		
		for(int row : intArray)
		{
			System.out.print(row);
		}
		System.out.println("\n");
		
		// The enhanced for loop can be used with
		// the multidimensional array
		// for(dataType[] variableForRow : arrayName)
		
		for(String[] rows : multiArray)
		{
			// for(dataType variableForColumn : arrayName)
			for(String column : rows)
			{
				System.out.print("|" + column + " ");
			}
			
			System.out.println("|");
		}
		
		System.out.println();
		
		// You can use the java arrays library to make a copy 
		// of an array with the following code
		// dataType[] arrayName = Arrays.copyOf(originalName, newSize);
		
		int[] intCopy = Arrays.copyOf(intArray, 6);
		
		for(int row : intCopy)
		{
			System.out.print(row);
		}
		System.out.println("\n");
		
		// The following will copy the original array within a 
		// specific set range. The numbers will be copied up
		// to the index before the end. 
		// so [0,1,2,3,4,5] with a range of [1,5]
		// will yield [1,2,3,4]
		
		int[] intCopy2 = Arrays.copyOfRange(intArray, 1, 5);
		
		// Then use the arrays library to print out the array
		// using the toString method
		
		System.out.println(Arrays.toString(intCopy2));
		
		System.out.println();
		
		// If for some reason you have to fill an array
		// with all of the same value
		// fill is your guy
		
		int [] allTwos = new int [100];
		
		Arrays.fill(allTwos, 2);
		
		System.out.println(Arrays.toString(allTwos));
		
		System.out.println();
		
		// Filling a game board with all one character
		// is something that can be done easily using
		// fill
		
		// create a multidimensional char array 5x5
		char [][] boardGame = new char [5][5];
		
		// create for loop to fill array with char *
		for(char[] row : boardGame)
		{
			Arrays.fill(row, '*');
		}
		
		// use for loop to print out results
		for(char[] row : boardGame)
		{
			// for(dataType variableForColumn : arrayName)
			for(char column : row)
			{
				System.out.print("|" + column);
			}
			
			System.out.println("|");
		}
		System.out.println();
		
		// You can sort an array using the built in sorting
		// algorithms inside the arrays library
		
		// Create new array with 10 indexes
		int[] intSort = new int[10];
		
		// Create for loop to generate values for the index of i
		for(int i = 0; i<intSort.length; i++)
		{
			// Fill array with Math.random() * number
			intSort[i] = (int) (Math.random() * 11);
		}
		
		System.out.println("\nBefore Sort\n");
		
		System.out.println(Arrays.toString(intSort));
		
		// Call to Arrays.sort to sort the array of random numbers
		Arrays.sort(intSort);
		
		System.out.println("\nAfter Sort\n");
		
		System.out.println(Arrays.toString(intSort));
		
		// If you need to find a value inside of an array
		// use the binarySearch method
		// This will return a negative value if the value
		// you're searching for is not found, but will return
		// the index location of the value if found. The 
		// index will be the first location where the value
		// is found, and it might be in multiple places
		
		int whereIsTen = Arrays.binarySearch(intSort, 10);
		
		System.out.println(whereIsTen);
		
	}

}

=========================================================================== Tutorial 10

=========================================================================== Tutorial 11
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Arrays;

public class tutorial11 
{

	public static void main(String[] args) 
	{	
		// Create array lists just like arrays
		ArrayList arrayListOne;
				
		arrayListOne = new ArrayList();
		
		// You can declare the arraylist all on one line
		ArrayList arrayListTwo = new ArrayList();
		
		// Array lists can be data type cast
		// ArrayList<dataType> arrayName = new ArrayList<dataType>();
		ArrayList<String> names = new ArrayList<String>();
		
		// You can add to the array list without declaring an index
		names.add("James Patterson");	// 0
		names.add("Jill Hardin");		// 1
		names.add("Steve Vai");	// 2
		
		// or you can declare the index and add to a specific index
		names.add(2, "Bon Jovi");	// 3
		
		// Loop through to see the results
		for (int i = 0; i < names.size(); i++)
		{
			System.out.println(names.get(i));
		}
		
		// You can replace a value inside an index using set
		names.set(2, "Jack Reacher");
		
		System.out.println();
		
		for (int i = 0; i < names.size(); i++)
		{
			System.out.println(names.get(i));
		}
		System.out.println();
		
		// To remove a value from a specific index
		names.remove(2);
		
		for (int i = 0; i < names.size(); i++)
		{
			System.out.println(names.get(i));
		}
		
		System.out.println();
		
		// You could print out the arraylist like this
		
		System.out.println(names);
		
		System.out.println();
		
		// You can use the enhanced for loop
		for(String row : names)
		{
			System.out.println(row);
		}
		
		System.out.println();
		
		// To use the iterator object
		Iterator eachValue = names.iterator();
		
		while(eachValue.hasNext())
		{
			System.out.println(eachValue.next());
		}
		
		System.out.println();
		
		// You can copy one array list to another
		ArrayList namesCopy = new ArrayList();
		
		namesCopy.addAll(names);
		
		for(Object row : namesCopy)
		{
			System.out.println(row);
		}
		
		System.out.println();
		
		// You can create a string
		// and add that string to the 
		// array list dynamically
		
		String tupac = "Tupac Shukar";
		
		names.add(tupac);
		
		for(Object row : names)
		{
			System.out.println(row);
		}
		
		System.out.println();
		
		// You can search for a specific value inside the array list
		// if the boolean returns true, your code will execute from the
		// if statement block
		
		if (names.contains(tupac))
		{
			System.out.println("Tupac is in da house");
		}
		
		System.out.println();
		
		// If you need to make sure all the data is identical 
		
		if (namesCopy.containsAll(names))
		{
			System.out.println("Yes");
		}
		else
		{
			System.out.println("No");
		}
		
		System.out.println();
		
		// If you want to clear out the array list
		
		namesCopy.clear();
		
		if (namesCopy.isEmpty())
		{
			System.out.println("The copy of names is empty");
		}
		
		System.out.println();
		
		// This is how to create an array list with data type 
		// set as object
		Object[] moreNames = new Object[4];
		
		moreNames = names.toArray();
		
		System.out.println(Arrays.toString(moreNames));
				
	}

}

=========================================================================== Tutorial 12
import java.util.Arrays;
import java.util.LinkedList;

// Linked lists are great, but they have pros and cons
// LLs are great if you need to add or delete information
// within the lists, but they are not great with indexing.

public class tutorial12 
{

	public static void main(String[] args) 
	{
		// Create the object for the linked list
		LinkedList linkedList1 = new LinkedList();
		
		// Create the object with a specific data type 
		LinkedList<String> names = new LinkedList<String>();
		
		// add a few names to the linked list
		names.add("James Patterson");
		names.add("Jill Hardin");
		names.add("Brian Hartman");		
		
		// Enhanced for loop to loop through the names
		int i = 0;
		for(String name : names)
		{
			System.out.println(i + ": " + name); i++;
		}	System.out.println(); 
		
		//
		// This will add the value to the end of the list
		names.addLast("Nathan Miller");
		
		i = 0;
		for(String name : names)
		{
			System.out.println(i + ": " + name); i++;
		}	System.out.println(); 
		
		// This will add the name to the first of the list
		names.addFirst("Josh Bain");
		
		i = 0;
		for(String name : names)
		{
			System.out.println(i + ": " + name); i++;
		}	System.out.println(); 
		
		// Adding to a specific location is easy
		// just use add(index, value)
		names.add(3, "Danielle Walker");
		
		i = 0;
		for(String name : names)
		{
			System.out.println(i + ": " + name); i++;
		}	System.out.println(); 
		
		// This is how you replace a value at a specific index
		names.set(0, "Paul Newman");
		
		i = 0;
		for(String name : names)
		{
			System.out.println(i + ": " + name); i++;
		}	System.out.println(); 
		
		// This is how to remove from a linked list
		names.remove(0);
		// Remove by index or by value
		names.remove("Danielle Walker");
		
		i = 0;
		for(String name : names)
		{
			System.out.println(i + ": " + name); i++;
		}	System.out.println();
		
		// Additional way to retrieve the values
		System.out.println("First index: " + names.get(1));
		
		System.out.println();
		
		// Print out the first value
		System.out.println("First index: " + names.getFirst());
		
		System.out.println();
		
		// Print out the second value
		System.out.println("First index: " + names.getLast());
		
		System.out.println();
		
		// This is how to copy a data type specific linked list
		// LL<dataType> LLName = new LL<dataType>(originalLL)
		LinkedList<String> names2 = new LinkedList<String>(names);
		
		// This will print the values, but it is a bit ugly
		System.out.println("Copy of names LL: " + names2);
		
		System.out.println();
		
		// You can use an if statement to see if a value is
		// located in the linked list
		if(names.contains("James Patterson"))
		{
			System.out.println("Is in da house");
		}	System.out.println();
		
		// You can check to see if two linked lists are the same
		if(names.containsAll(names2))
		{
			System.out.println("Yes, they are");
		}	System.out.println();
		
		// This is will return "No" but if you do not
		// code the else statement in, the response
		// will be nothing.
		names.remove(3);
		
		if(names.containsAll(names2))
		{
			System.out.println("Yes, they are");
		}else
		{	
			System.out.println("No, they are not");
		}	System.out.println();
			
		// To search the linked list by name
		// You need to put the whole value at the index
		// If you just put James or james patterson
		// the function will return nothing
		int nameOf = names.indexOf("James Patterson");
		
		System.out.println(nameOf);
		
		System.out.println();
		
		// If you would like to check to see if a list is empty
		// isEmpty is a method that returns a boolean
		System.out.println("Is the list empty: " + names.isEmpty());
		System.out.println();
		
		// If you push a value on the linked list
		// You are adding the value to the beginning 
		names2.push("Peter Griffin");
		
		i = 0;
		for(String name : names2)
		{
			System.out.println(i + ": " + name); i++;
		}	System.out.println();
		
		// You can pop an object off the linked list
		// You are removing the first value of the list
		names2.pop();
		
		i = 0;
		for(String name : names2)
		{
			System.out.println(i + ": " + name); i++;
		}	System.out.println();
		
		// To create an array from a linked list
		Object [] namesArray = new Object[5];
		
		namesArray = names.toArray();
		
		System.out.println(Arrays.toString(namesArray));
		
		// If you need to clear the entire Linked List
		names.clear();
		
		System.out.println();		
		System.out.println("Is the list empty: " + names.isEmpty());
		System.out.println();
	}

}
=========================================================================== Tutorial 13
import java.util.Arrays;

public class tutorial13 
{

	public static void main(String[] args) 
	{
		// To create a general string
		String greeting = "I'm doing great!";
		
		// Use the \before a " if you need to use one inside a string
		String gotToQuote = "He said, \"I'm here\"";
		
		int num = 31;
		
		String upper = "HELLO";
		
		String upperLower = "hello";
		
		String lower = ", how are you?";
		
		System.out.println();
		
		// how to print out various strings mixed with an int value
		System.out.println(upper + lower + "\n" + greeting + num);
		
		System.out.println();
		
		// We can check if two strings are equal
		// This will return false due to it being case sensitive
		if (upper.equals(upperLower))
		{
			System.out.println("They are equal");
		}
		else
		{
			System.out.println("They are not equal");
		}
		
		System.out.println();
		
		// This will ignore case, and return true
		// it only looks at the spelling 
		if (upper.equalsIgnoreCase(upperLower))
		{
			System.out.println("They are equal");
		}
		else
		{
			System.out.println("They are not equal");
		}
		
		System.out.println();
		
		String letters = "abcdef";
		
		String moreLetters = "ghjijkl";
		
		System.out.println("2nd character: " + letters.charAt(2));
		
		System.out.println();
		
		// This is how to compare two strings to each other
		// This will return false, but it will print a -6
		// If the strings are equal, a 0 will be printed
		// compareTo compares strings based on alphabetical order
		System.out.println(letters.compareTo(moreLetters));
		
		System.out.println();
				
		// If you want to find out if a string contains something
		System.out.println(letters.contains("cde"));
		
		System.out.println();
		
		// To see if a string ends a certain way
		System.out.println(letters.endsWith("ef"));
		
		System.out.println();
		
		// To find the starting index position for a char
		System.out.println(letters.indexOf("cde"));
		// You can specify the index to start searching from 
		// indexOf(stringToSearchFor, indexStartingPosition)
		// lastIndexof() is the same as indexOf, except it
		// works from the end forwards
		
		System.out.println();
		
		//Find out the length of a string
		System.out.println(letters.length());
		
		System.out.println();
		
		// You can also replace letters
		System.out.println(letters.replace("abc", "xyz"));
		
		// The replace function does not replace the actual values
		// It only replaces the values at that moment if it is called
		System.out.println(letters);
		
		System.out.println();
		
		// You can split the string
		// You do have to provide a delimiter
		// If can be nothing, a comma, any character
		String [] strA = letters.split("");
		
		System.out.println(Arrays.toString(strA));
		
		System.out.println();
		
		// The sub string function is neat
		System.out.println(letters.substring(1,3));
		
		System.out.println();
		
		// To force uppercase, and you can specify index
		System.out.println(letters.toUpperCase());
		
		System.out.println();
		
		// To force lower case
		System.out.println(letters.toLowerCase());
		
		System.out.println();
		
		// To delete white space in a string
		// Trim only works at the beginning and the end
		// It will not work on the inside of the string
		String ranStr = "       Hi,        abcekasfjasjkhd";
		
		System.out.println(ranStr);
		
		System.out.println();
		
		System.out.println(ranStr.trim());
		
		System.out.println();
		
		// String Builder is great
		StringBuilder str1 = new StringBuilder("Hello World");
		
		System.out.println(str1);
		
		System.out.println();
		
		// Will add on to the stringBuilder object
		// The change is permanent
		System.out.println(str1.append(" , How are you?"));
		
		System.out.println();
		
		System.out.println(str1);
		
		System.out.println();
		
		// You can delete from starting index to end
		System.out.println(str1.delete(5, 10));
		
		System.out.println();
		
		// StringBuilder is reserving memory just for your string
		// You can find out how much that space is by
		System.out.println(str1.capacity());
		
		System.out.println();
		
		// You can check the length of a StringBuilder object
		System.out.println(str1.length());
		
		System.out.println();
		
		// You can use the trimToSize to ensure your capacity 
		// reserved in memory is proportionate to your actual
		// string size
		str1.trimToSize();
		
		System.out.println(str1.capacity());
		
		System.out.println();
		
		StringBuilder str2 = new StringBuilder("A random Value");
		
		System.out.println(str2);
		
		// You can add onto a string
		System.out.println(str2.insert(1, "nother"));
		
		// To convert a StringBuilder into a String object
		String str3 = str2.toString();
	}
}
=========================================================================== Tutorial 14
// Animals would be the super class
// because we expect to make sub classes (copies of it)
// Those copies will change in one way or another 
public class Animals 
{
	// private means the only class who has access to this
	// is the Animals class
	private String name = "Animal";
	
	// public means anyone has access to it
	public String favFood = "Food";
	
	// protected ensures that all subclasses of the superclass
	// is allowed to access the methods
	// final makes sure that sub classes cannot change (override)
	protected final void changeName(String newName)
	{
		// this is a reference to an object created by the
		// Animals class
		this.name = newName;
	}
	
	// 
	protected final String getName()
	{
		return this.name;
	}
	
	public void eatStuff()
	{
		System.out.println("This sure is good " + favFood);		
	}
	
	// This method will be overridden
	public void walkAround()
	{
		System.out.println(this.name + " walks toward certain doom.");		
	}
	
	// This is a constructor
	// the constructor method is executed
	// when an object is created
	public Animals()
	{
		
	}
	
	public Animals(String name, String favFood)
	{
		this.changeName(name);
		this.favFood = favFood;
	}

}
---------------------------------------------------------

---------------------------------------------------------
// Dogs will inherit all of the Animals methods, fields, etc
// This is referred to as inheritance 
public class Dogs extends Animals
{
	public String favToy = "Rope";
	
	public void playWith()
	{
		System.out.println("The Dog plays with a " + favToy + ".");
	}
	
	// This method will override the original walkAround method
	// It will change what is printed
	public void walkAround()
	{
		System.out.println(this.getName() + " stalks around town.");
	}
	
	public String getToy()
	{
		return this.favToy;
	}
	
	// create the standard issue constructor
	public Dogs()
	{
		
	}
	
	// create your constructor to create a Dogs object
	public Dogs(String name, String favFood, String favToy)
	{
		super(name, favFood);
		this.favToy = favToy;
	}

}

---------------------------------------------------------

---------------------------------------------------------
// Uses the Animals.java and Dogs.java classes

public class tutorial14
{

	public static void main(String[] args) 
	{
		// First we will create a generic Animal object
		// This will use generic information from the Animals class	
		Animals regAnimal = new Animals();
		
		// This will print out what we set to return from getName method
		System.out.println(regAnimal.getName());
		
		// This will print out what we set to return from favFood
		System.out.println(regAnimal.favFood);
		
		// This will print out the original String phrase we coded
		// This will not be overridden
		regAnimal.walkAround();
		
		System.out.println();
		
		// This will create a Dogs object named buster
		// We are defining buster's attributes
		Dogs buster = new Dogs("Buster", "Steak", "Rubber Ducky");
		
		// Print out the information from the buster object
		System.out.println(buster.getName());
		System.out.println(buster.favFood);
		System.out.println(buster.favToy);
		
		// This will print out the method defined inside
		// of the Dogs subclass, not the Animals Superclass
		buster.walkAround();
		
		// This will create a Dogs object using the Animals super class
		// This is okay because all "Dogs" are Animals
		// Dogs directly inherits all of the Animals methods and etc
		Animals pudge = new Dogs("Pudge", "Green Peppers", "Stuffed Bunny");
		
		// Below we create a method that will show polymorphism
		// The method will accept an object, which we created a Dog object
		// above called pudge
		acceptAnimals(pudge);
		
		// The method will get the objects name, favorite food, and
		// it will print out the return statement from the walkAround
		// method located inside the Dogs class, not the Animals class
		// This is polymorphism in action
		// Basically, Java is smart enough to distinguish between which
		// walkAround method you need to use. The object being passed to
		// acceptAnimals will be evaluated. First, java will ensure it is
		// an Animal, and then Java will figure out if it is a Dogs object
		// or not. If it wasn't , Animals walkAround would be printed, but
		// since the object is a Dogs object, the Dogs walkAround method
		// will be executed. 
		
		System.out.println();
		
		// Below we will create just a Animals object
		// and pass it to acceptAnimals
		// We will see that the method will return statements from
		// the Animals super class, and not any subclasses.
		
		Animals pooper = new Animals("Pooper", "Bird Seed");
		
		acceptAnimals(pooper);
		
	}	
	
	public static void acceptAnimals(Animals randomAnimal)
	{
		System.out.println();
		
		System.out.println(randomAnimal.getName());
		
		System.out.println(randomAnimal.favFood);
		
		System.out.println();
		
		randomAnimal.walkAround();
		
		System.out.println();
		
		// This will cast the randomAnimal as a Dogs object
		// This will work for any actual Dogs objects
		// but it will throw an exception for any Animals objects
		Dogs temp = (Dogs) randomAnimal;
		
		// You simply cannot cast a superclass object
		// as a subclass object
		// Remember, all Dogs are Animals
		// but not all Animals are Dogs
		// So, all Subclasses are SuperClasses
		// but not all Superclasses are subclasses
		System.out.println(temp.favToy);
		
		// You may want to cast directly
		// This will ensure you don't have to use a temporary field
		// You can just cast it directly within the println
		System.out.println( ((Dogs)randomAnimal).favToy);
		
		// You can check to see if an object is an instance of a class
		if ( randomAnimal instanceof Animals)
		{
			System.out.println(randomAnimal.getName() + " is an Animal.");
		}
		
		if ( randomAnimal instanceof Dogs)
		{
			System.out.println(randomAnimal.getName() + " is a Dog.");
		}				
	}	
}
=========================================================================== Tutorial 15
// When you want to create a class where every method does not
// need to be implemented to use the abstract class
public abstract class Crashable 
{

	boolean vehicleDrivable = true;
	
	public void youCrashed()
	{
		this.vehicleDrivable = false;
	}
	
	public abstract void setCarColor(String carColor);
	
	public abstract String getCarColor();
	
}
-------------------------------------------------------------
-------------------------------------------------------------
// Java does not allow inheritance from multiple classes
// Therefore, abstract classes and interfaces come into play
public interface Drivable 
{

	// Putting fields within an interface ensures the 
	// fields are basically constants. They will not change
	double PI = 3.14;
	
	int getWheel();
	
	void setWheels(int numberOfWheels);
	
	double getSpeed();
	
	void setSpeed(double speed);

}

// Interfaces are nice, concise, and tidy. They are usually short
// and to the point. They are a blueprint of what you will do with
// additional implementations. I like to go ahead and write out the 
// methods here to be able to easily copy and paste into the class 
// that will implement the interface. Anything created within an 
// interface must be implemented within the class that is implementing
// the interface. Interfaces seem a bit odd and counter productive, but
// Java does not allow multiple inheritance. So, 

/*

	public int getWheel()
	{
		return this.numberOfWheels;
	}
	
	public void setWheels(int numOfWheels)
	{
		this.numberOfWheels = numOfWheels;
	}
	
	public double getSpeed()
	{
		return this.speed;
	}
	
	public void setSpeed(double speed)
	{
		this.speed = speed;
	}

*/
-------------------------------------------------------------
-------------------------------------------------------------
public class Vehicle extends Crashable implements Drivable
{
	int numberOfWheels = 4;
	
	double speed = 120.00;
	
	String carColor = "Green";
	
	// First, copy and paste all of the information from the interface
	// into the class you're implementing
	// Everything defined inside of the interface is public
	// within the class though, you must put public 
	
	public int getWheel()
	{
		return this.numberOfWheels;
	}
	
	public void setWheels(int numOfWheels)
	{
		this.numberOfWheels = numOfWheels;
	}
	
	public double getSpeed()
	{
		return this.speed;
	}
	
	public void setSpeed(double speed)
	{
		this.speed = speed;
	}
	
	// Do Not Forget your standard issue constructor
	
	public Vehicle()
	{
		
	}
	
	public Vehicle(int wheels, double s)
	{
		this.numberOfWheels = wheels;
		this.speed = s;
	}
	
	// Make sure to take abstract out of the methods here
	// it wont execute if you leave them in
	public void setCarColor(String carColor)
	{
		this.carColor = carColor;
	}
	
	public String getCarColor()
	{
		return this.carColor;
	}

}

-------------------------------------------------------------
-------------------------------------------------------------
public class tutorial15 
{

	public static void main(String[] args) 
	{
		Vehicle car = new Vehicle(4, 120.05);
		
		System.out.println("The car has a top speed of " + car.getSpeed() + " mph.");
		System.out.println("The number of wheels on the car is " + car.getWheel() + ".");
	
		car.setCarColor("Lime Green");
		
		System.out.println("The color of the car is " + car.getCarColor() + ".");
	
	}

}


=========================================================================== Tutorial 16
	N/A 
=========================================================================== Tutorial 17
public class GetTheMail implements Runnable
{
	
	private int startTime;
	
	public GetTheMail(int startTime)
	{
		this.startTime = startTime;
	}
	
	public void run()
	{
		try
		{
			Thread.sleep(startTime * 1000);
		}
		catch(InterruptedException e)
		{
			System.out.println("There was an error, mate.");			
		}
		
		System.out.println("Checking the Mail, mate");
	}

}

-------------------------------------------------------------
-------------------------------------------------------------
import java.util.*;
import java.text.DateFormat;

/*
 * This tutorial will cover Threads
 * 
 * 	threads just run parallel to each other
 * 	they will execute, run, print, etc at the same time
 * 	or in a specific order if you wish them to.
 * 
 * 	Threads are responsible for a computer being able to run a program, 
 * 	run firefox, check email, and more at the same time concurrently.
 * 	The programs are each running on a different thread of the OS. 
 */

public class GetTime extends Thread
{
		// Since we extend Thread, we must have the methods from Thread we want to use
		// inside the class that is extending the Thread class.	
	
	public void run()
	{
		Date rightNow;
		Locale currentLocale;
		DateFormat timeFormatter;
		DateFormat dateFormatter;
		String timeOutput;
		String dateOutput;
		
		for (int i = 1; i <= 20; i++)
		{
			rightNow = new Date();
			
			currentLocale = new Locale("en");
			
				// Try using short, medium, long, or full instead of Default
			timeFormatter = DateFormat.getTimeInstance(DateFormat.DEFAULT, currentLocale);
			
			dateFormatter = DateFormat.getDateInstance(DateFormat.DEFAULT, currentLocale);
			
			// Converts the time into Strings for formatting purposes
			timeOutput = timeFormatter.format(rightNow);
			
			dateOutput = dateFormatter.format(rightNow);
			
			System.out.println("==========================");
			
			System.out.println();
			
			System.out.println(timeOutput);
			
			System.out.println();
			
			System.out.println(dateOutput);
			
			System.out.println();
			
			System.out.println("==========================");
			
			try
			{
					// 1000 = 1 second
					// 2000 = 2 second
					// 10000 = 10 seconds
				Thread.sleep(2000);
			}
			catch(InterruptedException e)
			{
				System.out.println("There was an error, mate.");			
			}
			
		}
		
	}
	
	public static void main(String[] args) 
	{
		
	}

}
-------------------------------------------------------------
-------------------------------------------------------------
public class Tutorial17_2 
{

	public static void main(String[] args) 
	{
			// Need to create a thread object
		Thread getTime = new GetTime();
		
			// Create getMail Runnable object
		Runnable getMail = new GetTheMail(10);
		
			// To create another Runnable object
		Runnable getMail2 = new GetTheMail(20);
		
		// This is how to execute the getTime thread object
		getTime.start();
		
		new Thread(getMail).start();
		
		new Thread(getMail2).start();
		
	}

}

=========================================================================== Tutorial 18
import java.util.*;
import java.text.DateFormat;

	// You want to implement Runnable instead of extending the Threads class
	// Runnable will achieve the same thing, and allow the programmer to 
	// extend another class. Since you can only extend one class, but you can 
	// implement as many classes as you want. 
public class CheckSystemTime implements Runnable
{

	public void run()
	{
			// Initialize a Date object called rightNow
		Date rightNow;
			
			// Initialize a Locale object called currentLocale
		Locale currentLocale;
		
			// Initialize a DateFormat object called timeFormatter
			// This will format the time for the user
		DateFormat timeFormatter;
		
			// This is the String object that we will store the formatted time in
		String timeOutput;
		
			// Cast rightNow as a new Date object
		rightNow = new Date();
		
			// Cast currentLocale as a Locale object with en for english
		currentLocale = new Locale("en");
		
		timeFormatter = DateFormat.getTimeInstance(DateFormat.DEFAULT, currentLocale);
		timeOutput = timeFormatter.format(rightNow);
		
		System.out.println();
		
		System.out.println("TIME: " + timeOutput);
		
	}	

}
-------------------------------------------------------------
-------------------------------------------------------------
// Library allows for library lock down
	// It is possible that both threads might call at the same time
	// Causing a thread lock situation
	// ReentrantLock helps eliminate those issues
import java.util.concurrent.locks.ReentrantLock;

	// Implement Runnable, maybe we want to extend a class in the future
public class PerformSystemCheck implements Runnable
{
		// Initialize a String object called checkWhat
		// It will hold the value for which we wish to check
	private String checkWhat;
	
		// Create a new ReentrantLock object
	ReentrantLock lock = new ReentrantLock();
	
		//
	public PerformSystemCheck(String checkWhat)
	{	
			// this is a reference to the actual object's variables
			// So...  actualObject = passedInformation
			// This is why we create the constructor
		this.checkWhat = checkWhat;
	}
	
		// You may use synchronized to help eliminate a thread lock situation
		// of you can just lock it down using code
	public void run()
	{
			// Use lock to lock a thread instead of synchronized
		lock.lock();
		
		System.out.println();
		
			// Tell the user it is checking for the thread that is calling it
		System.out.println("Checking " + this.checkWhat);
		
			// Whenever you lock a thread down, you must remember to unlock
			// Much like a database, when you access the database it must be
			// opened and closed after use.
		lock.unlock();
		
		
	}

}
-------------------------------------------------------------
-------------------------------------------------------------
	// import the scheduler
	// this uses predefined schedules
	// used to throw all threads into a pool and execute
import java.util.concurrent.ScheduledThreadPoolExecutor;

	// You have to import the time schedule
import static java.util.concurrent.TimeUnit.*;

public class Tutorial18 
{

	public static void main(String[] args) 
	{
			// Call to a method outside of the main function to run the threads
		addThreadsToPool();
	}
	
	
	
	public static void addThreadsToPool()
	{
			// Create the STPE object called eventPool with 5 threads
		ScheduledThreadPoolExecutor eventPool = new ScheduledThreadPoolExecutor(5);
		
			//	This will add a thread to the pool
			// This will check the System time immediately upon execution
			// This will check immediately and every 2 seconds following
		eventPool.scheduleAtFixedRate(new CheckSystemTime(), 0, 2, SECONDS);
		
			// This will run a Mail check after 5 seconds and every 5 seconds following
		eventPool.scheduleAtFixedRate(new PerformSystemCheck("Mail"), 5, 5, SECONDS);
			
			// This will run a Calender check after 10 seconds and continue to do so
			// every 10 seconds following	
		eventPool.scheduleAtFixedRate(new PerformSystemCheck("Calender"), 10, 10, SECONDS);
		
			// This will tell us the number of threads present
			// 1. Main with a priority of 5
			// 2,3,4 will come from the threads we created
		System.out.println("Number of Threads: " + Thread.activeCount());
		
			// Create an array to store the thread information in
			// Thread.activeCount() will give us the number of threads active
		Thread[] listOfThreads = new Thread[Thread.activeCount()];
			
			// Use a enumerator to loop through the list of threads
		Thread.enumerate(listOfThreads);
		
			// Use the for loop to print out the information from the threads using
			// the enumerator 
			// You can set the priority of each thread by
			// threadName.setPriority();
			// 1 is the lowest, and 10 is the highest
		for(Thread i : listOfThreads)
		{
			System.out.println("========================");
			System.out.println(i.getName());
			System.out.println();
			System.out.println(i.getId());
			System.out.println(i.getPriority());
			System.out.println("========================");
		}
		
			// eventPool.shutdown(); will cease all of your threads from running
			// the minute this code is executed
 		
			// We don't want our program to run indefinitely
			// Create a try and catch block to fix that issue
		
		try
		{
			Thread.sleep(20000);
		}
		catch(InterruptedException e)
		{
			
		}		
	}
}

=========================================================================== Tutorial 19
/* 
 * This tutorial will focus on regular expressions, or RegEx 
 */
// Import the proper libraries
import java.util.regex.*;

public class Tutorial19 
{

	public static void main(String[] args) 
	{

			// First, lets create two strings with different types of information
		String myString = " James Patterson GA 12345 MI (555)555-1111 example@yahoo.com 555-555-1515 555 555-1511 5555551122 ";	
	
			// Second, create another bologna string
		String oddString = " 1Z aab **** *** {{{ {{ { ";
			/*
			* Anything being searched for by a regular expression will be in []
			* [A-Z] will search for all capital letters between A and Z
			* [a-z] will search for all lower case letters between a and z
			* [0-9] search for numbers between 0 and 9
			* [^A-G] will search for characters NOT A-G
			* 	-----This is different in Java than any other language
			* \\s will search for white space
			* 		this is very sensitive
			* 		\\s\\s will search for 2 white spaces before or after the characters
			* \\S will search for NOT white space
			* \\w{2,20} will match any Strings between 2 and 20 characters
			* \\d will search for digits
			* \\D will search for anything that isnt a digit
			* {5} search for something that occurred a specific amount of times, say 5
			* 
			* {n,m} will search for [minimum, maximum}			* 
			* 
			* To search for a word that is between 5 and 20 characters in length
			* 	[A-Za-z]{5,20} 	 
			* 
			*/
		
			// This will return James, GA, and MI
			// because James has a single white space before and after
			// while going through the string, Patterson does not appear to have white
			// space before it due to James , and this is why Patterson does not
			// show up. If you would use \\S at the end, the results would be different
		regexChecker("\\s[A-Za-z]{2,20}\\s", myString);
		
		System.out.println("==============================");
		
			// Looking for a word between 2 and 20 characters
			// with either upper/lower case letters and not white space following it
		
		regexChecker("\\s[A-Za-z]{2,20}\\S", myString);
		
		System.out.println("==============================");
		
			// 
		
		regexChecker("\\w[A-Za-z]{2,20}", myString);
		
		System.out.println("==============================");
		
			// To search for a 5 digit code with white space before and after it
		
		regexChecker("\\s\\d{5}\\s", myString);
		
		System.out.println("==============================");
		
			// search for combinations of 
			/*
			 * AK, AL, AR, AZ
			 * CA, C0, CT
			 * G0, GA, GR
			 * ME, MW, MR, MI
			 */
		regexChecker("A[KLRZ] | C[A0T] | G[0AR] | M[EWRI]", myString);
		
		System.out.println("==============================");
		
			// Want to search for something with a min but NOT a max
		regexChecker("\\d{5,}", myString);
		
			// When you use a + sign in a regular expression
			// it means whatever follows the + sign must occur
			// One or More times
		
		System.out.println("==============================");
		
		// regexChecker();
		
			// Things that need to be backslashed twice before using them
			/*
			 * a .
			 * a ^
			 * a *
			 * a +, ?, [], \, |, ()
			 */
		
			// How to find characters with a minimum of x, x = 2 here
		regexChecker("(\\{{2,})", oddString);
		
		System.out.println("==============================");
		
			// Find two characters that has 1 or more of the same character following
		regexChecker("(\\{+)", oddString);
		
		System.out.println("==============================");
		
			// If you want to find anything, with a certain number involved
			// it definitely matches white spaces
		regexChecker(".{3}", oddString);
		
			// Search for any kind of word
		
		System.out.println("==============================");

		regexChecker("\\w [A-Za-z0-9_]", oddString);
		
			// Search for something that happens 0 or more times
		System.out.println("==============================");
		
		regexChecker("\\w*", oddString);
		
			// email addresses??
		System.out.println("==============================");
		
			// This will search for all combination of letters upper/lower and numbers
			// between 0-9, followed by a manditory @ then followed by any combination
			// of those same letters, followed by a manditory . with a 2 - 4 letter
			// combination following
		regexChecker("[A-Za-z0-9._%-]+@[A-Za-z0-9._-]+\\.[A-Za-z]{2,4}", myString);
		
		System.out.println("==============================");
		
		regexChecker("([0-9]( |-)?)?(\\(?[0-9]{3}\\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[A-Za-z0-9]{7})", myString);
		
		/*
		 * 	([0-9]( |-)?)?    	This is saying we are looking for a combination of 0-9
		 * 						followed by a white space or a -, but that might not
		 * 						exist at all and none of it might be present. Thats what 
		 * 						the ? is about, it represents if something is or isn't there
		 * 
		 * 	(\\(?[0-9]{3}\\)?	This is looking for a ( that might or might not exist,
		 * 						followed by having the digits 0-9 inside , which will be
		 * 						only 3 digits, followed by a ) that might or might not exist
		 * 
		 * 	|[0-9]{3})			OR the digits 0-9 in a combination of 3 
		 * 
		 * 	( |-)?([0-9]{3}( |-)?	Followed by a space or - that might or might not exist
		 * 							followed by 3 digit number 0-9 that is before a white
		 * 							space or - which might not exist at all
		 * 							
		 * 	[0-9]{4}			Followed by a 4 digit combination of numbers 0-9
		 * 	
		 * 	|[A-Za-z0-9]{7})	OR a 7 digit combination of upper/lower case letters and
		 * 						the digits 0-9. 
		 */
		
		System.out.println("==============================");
		
		regexReplace(myString);
		
	}

	
	
	
	public static void regexChecker(String theRegex, String str2Check)
	{
		Pattern checkRegex = Pattern.compile(theRegex);
		
		Matcher regexMatcher = checkRegex.matcher(str2Check);
		
		while(regexMatcher.find())
		{
			if(regexMatcher.group().length() != 0)
			{
				System.out.println(regexMatcher.group().trim());
			}
			
			System.out.println("Starting index: " + regexMatcher.start());
			
			
			System.out.println("Ending index: " + regexMatcher.end());
			
		}
		
		
	}	
	
	public static void regexReplace(String str2Replace)
	{
		Pattern replace = Pattern.compile("\\s+");
		
		Matcher regexMatcher = replace.matcher(str2Replace.trim());
		
		System.out.println(regexMatcher.replaceAll(", "));
		
		
	}
}
=========================================================================== Tutorial 20

import java.awt.Dimension;

import java.awt.Toolkit;

import javax.swing.*;

public class Tutorial20 extends JFrame
{

	public static void main(String[] args) 
	{

		new Tutorial20();

	}
	
	
	public Tutorial20()
	{
			// This is the size of the pop up in pixels
		this.setSize(400,400);
		
			// This will position the pop up relative to your screen
			// it will essentially center the screen
		//this.setLocationRelativeTo(null);
		
			// Toolkit is a superclass for the Abstract win toolkit
			// create a Toolkit object 
		Toolkit tk = Toolkit.getDefaultToolkit();
		
			// create a dimension object, the object will hold 
			// the size of the users screen
		Dimension dim = tk.getScreenSize();
		
			// 
		int xPos = (dim.width / 2) - (this.getWidth() / 2);
		
		int yPos = (dim.height / 2) - (this.getHeight() / 2);
		
		this.setLocation(xPos,  yPos);
		
			// Define if the user will be able to resize the window
		this.setResizable(false);
			
			//	Must be defined in order for the frame to be exited
			// 	or Java will eventually close 
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title of the pop up frame window
		this.setTitle("My First Java Swing Frame");
		
			// Jpanel is what will contain all of the components of your frame
		JPanel panel = new JPanel();
		
			// This is how to create a simple label object to add
		JLabel label = new JLabel("Tell me something good.. ");
		
			// If you want to replace what text is in the label
		label.setText("This is the new text");
		
			// To set a tool tip to hover over a label
		label.setToolTipText("This doesn't do a thing really");
		
			// add the label to the JPanel
		panel.add(label);
					
			// To create a button
		JButton button = new JButton("Send information");
		
			// if you want to hide the button border
		//button.setBorderPainted(false);
		
			// Will change/eliminate the background
		//button.setContentAreaFilled(false);
		
			// To set the text on a button
		button.setText("Press Me");
		
			// To set a tool tip to hover over a button
		button.setToolTipText("This will hover over the button");
		
			// Add the button to the panel
		panel.add(button);
		
			// A text field
		JTextField textField = new JTextField("Type Here, mate", 15);
		
			// To Set the number of columns a text field has
		textField.setColumns(10);
		
			// To set the text in a text field
		textField.setText("This is the text in the text field");
		
			// A tool tip works with text fields also
		textField.setToolTipText("Tool tip for text field");
		
		panel.add(textField);		
		
			// Text Areas
		JTextArea textArea = new JTextArea(15, 20);
		
			// To set the text of a text area
		textArea.setText("Text inside text area Text inside text area Text inside text area Text inside text area ");
		
			// 
		textArea.setLineWrap(true);
		
			// This ensures that words do not get cut off half way through
		textArea.setWrapStyleWord(true);
		
			// This will get the appropriate number of lines
		int numberOfLines = textArea.getLineCount();
		
			// Need to append to a text area
		textArea.append(",             Number of Lines: " + numberOfLines);
		
			//
		panel.add(textArea);
		
			//
		JScrollPane scrollBar = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		
			//
		panel.add(scrollBar);
		
		
			// To ensure that an area of the panel is focused on first
		textField.requestFocus();
		
		
		
		
		
		
		
			// 
		this.add(panel);
			
			// This must be set to true in order to see the pop up
		this.setVisible(true);
		
	}
}

=========================================================================== Tutorial 21
import java.awt.Dimension;

import java.awt.Toolkit;

import javax.swing.*;

import java.awt.event.*;

@SuppressWarnings("serial")
public class Tutorial21 extends JFrame
{
	
	JButton button1;
	JTextField textField1;
	JTextArea textArea1;
	int buttonClicked;
	

	public static void main(String[] args) 
	{
		new Tutorial21();
	}
	
	public Tutorial21()
	{
		// This is the size of the pop up in pixels
		this.setSize(400,400);
		
			// This will position the pop up relative to your screen
			// it will essentially center the screen
		//this.setLocationRelativeTo(null);
		
			// Toolkit is a superclass for the Abstract win toolkit
			// create a Toolkit object 
		Toolkit tk = Toolkit.getDefaultToolkit();
		
			// create a dimension object, the object will hold 
			// the size of the users screen
		Dimension dim = tk.getScreenSize();
		
			// dim.width will return the width of the screen
			// this.getWidth returns the predefined width for this object
		int xPos = (dim.width / 2) - (this.getWidth() / 2);		
		int yPos = (dim.height / 2) - (this.getHeight() / 2);
		
			// This will set the location of the pop up via (x,y)
		this.setLocation(xPos,  yPos);
		
			//		Must be defined in order for the frame to be exited
			// 	or Java will eventually close 
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title of the pop up frame window
		this.setTitle("My Second Frame");
		
			// Jpanel is what will contain all of the components of your frame
		JPanel panel = new JPanel();
		
			// Create the button object
		button1 = new JButton("Click Me");
		
			// Create instance of ListenForEvents to handle the events
		ListenForButton buttonListener = new ListenForButton();
		
			// Alerts the user when an event occurs on the button1
		button1.addActionListener(buttonListener);
		
			// Add the button to the panel
		panel.add(button1);
		
			// Create a JTextField
		textField1 = new JTextField("Type Here", 15);
				
			// Create instance of ListenForKeys
		ListenForKeys keyListener = new ListenForKeys();
		
			// 
		textField1.addKeyListener(keyListener);
			
			//
		panel.add(textField1);
		
			//	Create text area
		textArea1 = new JTextArea(15, 20);
		
			//	Set default text inside text area
		textArea1.setText("Tracking Events \n");
		
			//	If it will not fit on one line, jump to the next
		textArea1.setLineWrap(true);
		
			//	Ensures that lines stay intact if a line wrap occurs
		textArea1.setWrapStyleWord(true);
		
			//	
		panel.add(textArea1);
				
			//	Add scroll bar to text area
		JScrollPane scrollbar1 = new JScrollPane(textArea1, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		
			// Add scroll bar to the panel
		panel.add(scrollbar1);
		
			//	add the panel to the object currently being used
		this.add(panel);
		
			//	Creates instance  of ListenForWindow
		ListenForWindow forWindow = new ListenForWindow();
		
			// Tracks what the user does with the opened window
			// open, minimize, close, or etc
		this.addWindowListener(forWindow);
		
			// Creates instance  of ListenForWindow
		ListenForMouse forMouse = new ListenForMouse();
		
			// tracks the mouse if it is inside of the panel
		this.addMouseListener(forMouse);
		
			// Must be set to true in order to be visible
		this.setVisible(true);
		
	}
	
	
		// ActionListener will react to events on components
	private class ListenForButton implements ActionListener 
	{		
		// This is the method called when events occur
		public void actionPerformed(ActionEvent e)
		{
				// Check to see if the button was triggered
			if(e.getSource() == button1)
			{
					// This will increment buttonClicked by one every
					// time the button is clicked on
				buttonClicked++;
				
					// This will add the text to the textArea every 
					// time this method is called
				textArea1.append("Button Clicked: " + buttonClicked  + "\n");
				
				System.out.println("===================================");
				System.out.println(e.getSource().toString());
				System.out.println("===================================");
			}
		}
	}
	
	
		// This class will help track the key strokes on the keyboard
	public class ListenForKeys implements KeyListener
	{
			// Handles java's keyPressed events
		public void keyPressed(KeyEvent e)
		{
				// Add this to textArea
			textArea1.append("Key Hit: " + e.getKeyChar() + "\n");
				
				// print out some information within the console about
				// the keyPressed source information in string format
			System.out.println("===================================");
			System.out.println(e.getSource().toString());
			System.out.println("===================================");			
		}
		
		public void keyTyped(KeyEvent e){}
		
		public void keyReleased(KeyEvent e){}
		
	}
	
		// MouseListener will track the movement of the mouse
	public class ListenForMouse implements MouseListener
	{
			//	Called once the mouse is clicked
		public void mouseClicked(MouseEvent e)
		{
			textArea1.append("Mouse Panel Pos: " + e.getX() + " " + e.getY() + "\n");
			textArea1.append("Mouse Screen Pos: " + e.getXOnScreen() + " " + e.getYOnScreen() + "\n");
			textArea1.append("Mouse Button: " + e.getButton() + "\n");
			textArea1.append("Mouse Clicks: " + e.getClickCount() + "\n");
			
		}

			public void mouseEntered(MouseEvent e) {}

			public void mouseExited(MouseEvent e) {}

			public void mousePressed(MouseEvent e) 
			{
					// Will print in text area once mouse is pressed
				textArea1.append("Mouse Event ");
			}
				
				// Will print the remainder of the statement from the pressed
			public void mouseReleased(MouseEvent e) 
			{
				textArea1.append("Activated.\n");
			}
	}
	
	
	public class ListenForWindow implements WindowListener
	{
			//
		public void windowActivated(WindowEvent e)
		{
			textArea1.append("Window is Active.\n");
		}

		public void windowClosed(WindowEvent e) {
			// TODO Auto-generated method stub
			
		}

		public void windowClosing(WindowEvent e) {
			// TODO Auto-generated method stub
			
		}

		public void windowDeactivated(WindowEvent e) {
			textArea1.append("Window is Not Active.\n");
			
		}

		public void windowDeiconified(WindowEvent e) {
			textArea1.append("Window is Reinstated.\n");
			
		}

		public void windowIconified(WindowEvent e) {
			textArea1.append("Window is Minimized.\n");
			
		}

		public void windowOpened(WindowEvent e) {
			textArea1.append("Window is Opened.\n");
			
		}
	}
}
=========================================================================== Tutorial 22
import javax.swing.*;

import java.awt.event.*;

import javax.swing.event.ChangeEvent;

import javax.swing.event.ChangeListener;

import java.text.NumberFormat;

import javax.swing.border.*;

@SuppressWarnings({ "serial" })
public class Tutorial22 extends JFrame
{
	JButton button1;
	JLabel label1, label2, label3;
	JTextField textField1, textField2;
	JCheckBox dollarSign, commaSeparator;
	JRadioButton addNumbers, subNumbers, multiNumbers, divNumbers;
	JSlider howManyTimes;
	
	double number1, number2, total;	

	public static void main(String[] args) 
	{		
		new Tutorial22();				
	}
	
	
	public Tutorial22()
	{
		
			// Define the size of the JFrame
		this.setSize(400, 400);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Third Frame Tutorial");
		
			// Create the JPanel object that will contains the components
			// of the panel; button, jtextfield, etc
		JPanel panel = new JPanel();			
		
			// Create the button 
		button1 = new JButton("Calulate");
		
			// Create the instance of ListenForEvents
		ListenForButton lforButton = new ListenForButton();
		
			// The next part will alert the user when an 
			// event has occurred that includes the button
		button1.addActionListener(lforButton);
			
			// Make sure to add the button
		panel.add(button1);
		
			// Create a label for the first number
		label1 = new JLabel("Number 1: ");
		
			// Add the label to the panel
		panel.add(label1);
		
			// Create a text field for the user to enter the number
		textField1 = new JTextField("", 5);
		
			// add the text field to the panel
		panel.add(textField1);
		
			// Create another label for number 2
		label2 = new JLabel("Number 2: ");
		
			// must add the label to the panel
		panel.add(label2);
		
			// Create another empty place for the user to enter a number
		textField2 = new JTextField("", 5);
		
			// add the text field or it wont show up
		panel.add(textField2);
		
			// instantiate the JCheckbox object: dollarSigns
		dollarSign = new JCheckBox("Dollars");
		
			// instantiate the JCheckbox object: commas
		commaSeparator = new JCheckBox("Commas");
		
			// make sure to add dollar sign and comma separator
		panel.add(dollarSign);
		
				// true means checked by default
		panel.add(commaSeparator, true);
		
			// Instantiate JRadio button objects
		addNumbers = new JRadioButton("Add");
		subNumbers = new JRadioButton("Subtract");
		multiNumbers = new JRadioButton("Multiply");
		divNumbers = new JRadioButton("Divide");
		
			// Group the buttons together in a ButtonGroup object
		ButtonGroup operation = new ButtonGroup();
		
			// Add each individual radio button to the ButtonGroup object created
		operation.add(addNumbers);
		operation.add(subNumbers);
		operation.add(multiNumbers);
		operation.add(divNumbers);
		
			// Create another panel for the JButtons
		JPanel operationPanel = new JPanel();
		
			// additional panel was required to add the border to the radio buttons
			// the border will help users distinguish between the separate entities
			// create a Border object
		Border operationBorder = BorderFactory.createTitledBorder("Operations");
		
			// add border to the operationPanel created early for the radio buttons
		operationPanel.setBorder(operationBorder);
		
			// Adds the radio buttons to the operationPanel created for the radio buttons
		operationPanel.add(addNumbers); 
		operationPanel.add(subNumbers); 
		operationPanel.add(multiNumbers); 
		operationPanel.add(divNumbers); 
		
			// this will ensure that addNumbers is selected upon execution
		addNumbers.setSelected(true);
		
			// add our additional panel to our first existing panel
		panel.add(operationPanel);
		
			// Instantiate the label for our slider object
		label3 = new JLabel("Perform How Many Times");
		
			// add the label to the panel
		panel.add(label3);
		
			// Instantiate the JSlider object with a min of 0
			// a max of 100, and the initial value being 1
		howManyTimes = new JSlider(0, 100, 1);
		
			// minimum spacing between ticks
		howManyTimes.setMinorTickSpacing(1);
		
			// maximum spacing between ticks
		howManyTimes.setMajorTickSpacing(10);
		
			// Draws the tick labels on the slider
		howManyTimes.setPaintLabels(true);
		
			// Draws the ticks on the slider
		howManyTimes.setPaintTicks(true);
		
			// create an instance of ListenForSlider
		ListenForSlider lforSlider = new ListenForSlider();
		
			// This must be added in order for java to alert the user
			// to a change in the slider
		howManyTimes.addChangeListener(lforSlider);
		
			// add the slider object to the panel
		panel.add(howManyTimes);
		
			// Add the panel to the currently created object
		this.add(panel);
		
			// Set the JFrame to visible
		this.setVisible(true);
		
			// Gives the focus to the text field
		textField1.requestFocus();
	}
	
	
	private class ListenForButton implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent e) 
		{
				// Check if the source of an event was the button
			if(e.getSource() == button1)
			{
				try
				{
						// getText will return a string
						// parseDouble is used to parse the data into a double
					number1 = Double.parseDouble(textField1.getText());
					number2 = Double.parseDouble(textField2.getText());
				}	
				catch(NumberFormatException excep)
				{	
						// Will display an error message and stop execution
					JOptionPane.showMessageDialog(Tutorial22.this, "Please enter the right information", "Error", JOptionPane.ERROR_MESSAGE);
					System.exit(0);
				}
				
				
					// The following is a group of if statements that will 
					// either add, subtract, multipl, or divide the two
					// user entered numbers in the text fields. 
				
				if(addNumbers.isSelected()) 
				{
					total = addNumbers(number1, number2, howManyTimes.getValue());
				}
				else if(subNumbers.isSelected())
				{
					total = subtractNumbers(number1, number2, howManyTimes.getValue());
				}
				else if (multiNumbers.isSelected())
				{
					total = multiplyNumbers(number1, number2, howManyTimes.getValue());
				}
				else
				{
					total = divideNumbers(number1, number2, howManyTimes.getValue());					
				}
				
				
				if(dollarSign.isSelected())
				{
					NumberFormat numFormat = NumberFormat.getCurrencyInstance();
					
					JOptionPane.showMessageDialog(Tutorial22.this, numFormat.format(total), "Solution", JOptionPane.INFORMATION_MESSAGE);
				}
				else if (commaSeparator.isSelected()) 
				{
					NumberFormat numFormat = NumberFormat.getNumberInstance();
					
					JOptionPane.showMessageDialog(Tutorial22.this, numFormat.format(total), "Solution", JOptionPane.INFORMATION_MESSAGE);
				}
				
				else
				{
					JOptionPane.showMessageDialog(Tutorial22.this, total, "Solution", JOptionPane.INFORMATION_MESSAGE);
				}	
			}
		}		
	}
	
	private class ListenForSlider implements ChangeListener
	{

		@Override
		public void stateChanged(ChangeEvent e) 
		{
				// Checks to see if the source of the event was the slider
			if(e.getSource() == howManyTimes)
			{
				label3.setText("Perform how many times? " + howManyTimes.getValue());
			}
		}
		
	}
	
	
	public static double addNumbers(double number1, double number2, int howMany)
	{
		double totall = 0;
		
		int i = 1;
		
		while(i <= howMany)
		{
			totall = totall + (number1 + number2);
			i++;
		}
		
		return totall;
	}
	
	public static double subtractNumbers(double number1, double number2, int howMany)
	{
		double totall = 0;
		
		int i = 1;
		
		while(i <= howMany)
		{
			totall = totall + (number1 - number2);
			i++;
		}
		
		return totall;
	}
	
	public static double multiplyNumbers(double number1, double number2, int howMany)
	{
		double totall = 0;
		
		int i = 1;
		
		while(i <= howMany)
		{
			totall = totall + (number1 * number2);
			i++;
		}
		
		return totall;
	}
	
	public static double divideNumbers(double number1, double number2, int howMany)
	{
		double totall = 0;
		
		int i = 1;
		
		while(i <= howMany)
		{
			try
			{
				totall = totall + (number1 / number2);
				i++;
			}
			catch (ArithmeticException e)
			{
				System.out.println("You cannot divide by zero");
				System.out.println(e.getMessage());
				System.out.println(e.toString());
				e.printStackTrace();
			}
		}
		
		return totall;
	}

}
=========================================================================== Tutorial 24
import javax.swing.*;

import java.awt.event.*;

import java.text.NumberFormat;

public class Tutorial24 extends JFrame 
{
	JComboBox favoriteLanguages;
	JButton button1; 
	String infoOnComponent = "";
	
	public static void main(String[] args) 
	{
		new Tutorial24();
	}
	
	public Tutorial24()
	{
		
			// Define the size of the JFrame
		this.setSize(400, 200);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Fourth Frame Tutorial");
		
			// Create the JPanel object that will contains the components
			// of the panel; button, jtextfield, etc
		JPanel panel = new JPanel();
		
			// To use a combo box, you must utilize a data storage type
			// A string array will work out well
		String[] languages = {"Java", "Python", "C++"};
		
			// Add the string array to the combo box
		favoriteLanguages = new JComboBox(languages);
		
			// Add a language 
		favoriteLanguages.addItem("C#");
		
			// add the jcombobox to the panel
		panel.add(favoriteLanguages);
		
			// create a button
		button1 = new JButton("Get the Answer");
		
			// create instance of the ListenForButton class
		ListenForButton lforButton = new ListenForButton();
		
			// add Action listener to the button
		button1.addActionListener(lforButton);
		
			// Don't forget to add the button to the panel
		panel.add(button1);
		
			// To insert an item at a specific spot
		favoriteLanguages.insertItemAt("Javascript", 2);
		
			// if you want to limit how many items show at a time
		favoriteLanguages.setMaximumRowCount(4);
		
		/*
		 * To remove items
		 * 		favoriteLanguages.removeItem("Javascript");
		 * 
		 * 	Remove an item at a specific location
		 * 		favoriteShows.removeItemAt(1);
		 * 
		 * 	remove all items 
		 * 		favoriteLanguages.removeAllItems();
		 */
				
		this.add(panel);
		
		this.setVisible(true);
	}
	
	private class ListenForButton implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent e) 
		{
				// Check if the source of an event was the button
			if(e.getSource() == button1)
			{
				try
				{
					favoriteLanguages.setEditable(true);
					
						// get the item at 0
					infoOnComponent += "Item at 0: " + favoriteLanguages.getItemAt(0) + "\n";
					
						// get the number of items in the combo box
					infoOnComponent += "Number of Languages: " + favoriteLanguages.getItemCount() + "\n";
					
						// Get the index of selected item
					infoOnComponent += "Selected ID: " + favoriteLanguages.getSelectedIndex() + "\n";
					
						// Get the value for the selected item
					infoOnComponent += "Selected Languages: " + favoriteLanguages.getSelectedItem() + "\n";
					
						// To find out if the combo box items are editable
					infoOnComponent += "CombBox Editable: " + favoriteLanguages.isEditable() + "\n";
					
					JOptionPane.showMessageDialog(Tutorial24.this, infoOnComponent, "Information", JOptionPane.INFORMATION_MESSAGE);
					
					infoOnComponent = "";
				}	
				catch(NumberFormatException excep)
				{
					
				}
			}
		}		
	}

}

=========================================================================== Tutorial 25
import javax.swing.*;

import java.awt.event.*;

public class Tutorial25 extends JFrame
{
	JList favoriteMovies, favoriteColors;
	DefaultListModel defaultListModel = new DefaultListModel();
	JScrollPane scroller;
	JButton button1; 
	String infoOnComponent = "";
	
	public static void main(String[] args) 
	{
			// Call the constructor inside the main function
		new Tutorial25();
	}
	
	public Tutorial25()
	{
			// Define the size of the JFrame
		this.setSize(400, 400);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Fifth Frame Tutorial");
		
			// Create the JPanel object that will contains the components
			// of the panel; button, jtextfield, etc
		JPanel panel = new JPanel();
		
			// create a button
		button1 = new JButton("Get the Answer");
		
			// create instance of the ListenForButton class
		ListenForButton lforButton = new ListenForButton();
		
			// add Action listener to the button
		button1.addActionListener(lforButton);
		
			// Don't forget to add the button to the panel
		panel.add(button1);
		
			// array of strings
		String[] movies = {"The Matrix", "Troy", "IT"};
		
		favoriteMovies = new JList(movies);
		
		favoriteMovies.setFixedCellHeight(30);
		
		favoriteMovies.setFixedCellWidth(150);
		
		// Define how many selections can be made
		// MULTIPLE_INTERVAL_SELECTION: Select what ever you want
		// SINGLE_SELECTION: Select only one
		// SINGLE_INTERVAL_SELECTION: Select as many as you want if in order
		
		favoriteMovies.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
		
		// All the methods for lists
		/*
		* getSelectedIndex(): returns the index for the first selected item
		* getSelectedIndexes(): returns every selection in a list
		* getSelectedValue(): returns the value of the first selected
		* getSelectedValues(): returns an array of all values
		* isSelectedIndex(): returns true if index is selected
		*/
		
			// Default list model
		String[] colors = {"BLACK", "BLUE", "RED", "GREEN", "YELLOW"};
		
			// load colors into list
		for(String color: colors)
		{
			defaultListModel.addElement(color);
		}
		
			// Add a item to the list
		defaultListModel.add(2, "ORANGE");
		
			// 
		favoriteColors = new JList(defaultListModel);
		
			// ensure you can only see 4 items
		favoriteColors.setVisibleRowCount(4);
		
			// call scroller
		scroller = new JScrollPane(favoriteColors, 
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, 
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		
		favoriteColors.setFixedCellHeight(30);
		favoriteColors.setFixedCellWidth(150);
		
		panel.add(favoriteMovies);
		
		panel.add(scroller);
			
		this.add(panel);
		
		this.setVisible(true);
	}
	
	private class ListenForButton implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent e) 
		{
				// Check if the source of an event was the button
			if(e.getSource() == button1)
			{
				try
				{
					if(defaultListModel.contains("BLACK")) 
					{
						infoOnComponent += "Black is here\n";
					}
					if(!defaultListModel.isEmpty())
					{
						infoOnComponent += "Isn't empty\n";
					}
					
					infoOnComponent += "Elements in the list " + defaultListModel.size() + "\n";
					
					infoOnComponent += "Last Element " + defaultListModel.firstElement() + "\n";
					
					infoOnComponent += "Last Element " + defaultListModel.lastElement() + "\n";
					
					infoOnComponent += "Element in index 1 " + defaultListModel.get(1) + "\n";
					
						// Remove element by name
					defaultListModel.removeElement("BLACK");
					
						// Remove item at 0
					defaultListModel.remove(0);
					
						// Create array with all of the list elements
					Object[] arrayOfList = defaultListModel.toArray();
					
						// populate the array with the list
					for(Object color: arrayOfList)
					{
						infoOnComponent += color + "\n";
					}
					
					JOptionPane.showMessageDialog(Tutorial25.this, infoOnComponent, "Information", JOptionPane.INFORMATION_MESSAGE);
					
					infoOnComponent = "";
				}	
				catch(NumberFormatException excep)
				{
					
				}
			}
		}		
	}

}

=========================================================================== Tutorial 26

import javax.swing.*;

import java.awt.event.*;

	// Store different heights and widths
import java.awt.Dimension;

	// Dates
import java.util.Date;

	//
import javax.swing.SpinnerDateModel;

	// Calender which makes dates easy
import java.util.Calendar;


@SuppressWarnings("serial")
public class Tutorial26 extends JFrame
{
	JButton button1;
	JSpinner spinner1, spinner2, spinner3, spinner4;
	String outputString = "";

	public static void main(String[] args) 
	{
		new Tutorial26();
	}
	
	public Tutorial26()
	{
			// Define the size of the JFrame
		this.setSize(400, 400);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Sixth Frame Tutorial");
		
			// Create the JPanel object that will contains the components
			// of the panel; button, jtextfield, etc
		JPanel panel = new JPanel();
		
			// create a button
		button1 = new JButton("Get the Answer");
		
			// create instance of the ListenForButton class
			// It executes the ListenForButton method that must be defined
		ListenForButton lforButton = new ListenForButton();
		
			// add Action listener to the button
		button1.addActionListener(lforButton);
		
			// Don't forget to add the button to the panel
		panel.add(button1);
		
			// The default spinner allows incrementing through digits 1-9
		spinner1 = new JSpinner();
		
			// add the spinner to panel
		panel.add(spinner1);
		
			// more advanced spinner
			// initial number, starting number, max number, increment by number
		spinner2 = new JSpinner(new SpinnerNumberModel(1, 1, 100, 1));
		
			//
		panel.add(spinner2);
		
			// create array to store values
		String[] weekDays = {"Mon", "Tues", "Weds", "Thurs", "Friday"};
		
			// Create spinner with array data
		spinner3 = new JSpinner(new SpinnerListModel(weekDays));
		
			// create a Dimensions object to help set the size
			// of the spinners
		Dimension d1 = spinner1.getPreferredSize();
		
			// Sets the width in pixels for the specified spinner
		d1.width = 80;
		
			// sets the preferred size of the spinner to what we set
		spinner1.setPreferredSize(d1);
		
		Dimension d2 = spinner2.getPreferredSize();		
		d2.width = 80;		
		spinner2.setPreferredSize(d2);		
		Dimension d3 = spinner3.getPreferredSize();		
		d3.width = 80;		
		spinner3.setPreferredSize(d3);		
		panel.add(spinner3);
		
			// Date
		Date todaysDate = new Date();
		
			// initialize spinner4 with 
			// (todaysDate, null, null, Calendar. and choose one that best fits you
		spinner4 = new JSpinner(new SpinnerDateModel(todaysDate, null, null, Calendar.DAY_OF_MONTH));
		
			//This will help format the date for the user
		JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(spinner4,  "dd/mm/yyyy");
		
		spinner4.setEditor(dateEditor);
		
		panel.add(spinner4);
		
		Dimension d4 = spinner4.getPreferredSize();
		
		d4.width = 80;
		
		spinner4.setPreferredSize(d3);
		
		this.add(panel);
		
		this.setVisible(true);
	}
	
	private class ListenForButton implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent e) 
		{
				// Check if the source of an event was the button
			if(e.getSource() == button1)
			{
				try
				{
					outputString += "Spinner1 Value: " + spinner1.getValue() + "\n";
					outputString += "Spinner2 Value: " + spinner2.getValue() + "\n";
					outputString += "Spinner3 Value: " + spinner3.getValue() + "\n";
					outputString += "Spinner4 Value: " + spinner4.getValue() + "\n";
					
					JOptionPane.showMessageDialog(Tutorial26.this,  outputString, "Information", JOptionPane.INFORMATION_MESSAGE);
					outputString = "";
				}	
				catch(NumberFormatException excep)
				{
					
				}
			}
		}		
	}

}

=========================================================================== Tutorial 27
import java.awt.Dimension;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;

import tutorial.tutorial_26.Tutorial26;

import java.util.Enumeration;

public class Tutorial27 extends JFrame
{
	
	JButton button1;
	String outputString = "";
	
		// A tree will contain nodes that can contain other nodes
	/*	
	 * 			A
	 * 		/\		/\
	 * 		B C		D E		
	 */
	
		// To create a JTree
	JTree theTree;
	
	DefaultMutableTreeNode documents, work, games, emails;
	
	DefaultMutableTreeNode fileSystem = new DefaultMutableTreeNode("C Drive");
		
	public static void main(String[] args) 	
	{
		new Tutorial27();
	}
	
	public Tutorial27()
	{
			// Define the size of the JFrame
		this.setSize(400, 400);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Seventh Frame Tutorial");
		
			// Create the JPanel object that will contains the components
			// of the panel; button, jtextfield, etc
		JPanel panel = new JPanel();
		
			// create a button
		button1 = new JButton("Get the Answer");
		
			// create instance of the ListenForButton class
			// It executes the ListenForButton method that must be defined
		ListenForButton lforButton = new ListenForButton();
		
			// add Action listener to the button
		button1.addActionListener(lforButton);
		
			// Don't forget to add the button to the panel
		panel.add(button1);
		
			// Create the actual tree
		theTree = new JTree(fileSystem);

			// To ensure only one node is selected at a time
		theTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		
			//
		theTree.setVisibleRowCount(8);
		
			// 
		documents = addAFile("Docs", fileSystem);
			
			//
		addAFile("Resume.docx", documents);
		
		addAFile("CoverLetter.docx", documents);
		
		emails = addAFile("Emails", documents);
		
		addAFile("Schedule.txt", documents);
		
		addAFile("CallJames.txt", emails);
		
		work = addAFile("Work Applications", fileSystem);
		
		addAFile("Spreadsheet.exe", work);
		
		addAFile("WordProcessor.exe", work);
		
		games = addAFile("Games", fileSystem);
		
		addAFile("GTA V", games);
		
		addAFile("Halo 5", games);
		
		JScrollPane scrollBox = new JScrollPane(theTree);
		
		Dimension d = scrollBox.getPreferredSize();
		
		d.width = 200;
		
		scrollBox.setPreferredSize(d);
		
		panel.add(scrollBox);
		
		this.add(panel);
		
		this.setVisible(true);
	}	
	
	
	private class ListenForButton implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent e) 
		{
				// Check if the source of an event was the button
			if(e.getSource() == button1)
			{
				try
				{
					Object treeObject = theTree.getLastSelectedPathComponent();
					
					DefaultMutableTreeNode theFile = (DefaultMutableTreeNode) treeObject;
					
					String treeNode = (String) theFile.getUserObject();
					
					outputString += "The Selected Node: " + treeNode + "\n";
					
					outputString += "Number of Children: " + theFile.getChildCount() + "\n";
					
					outputString += "Number of Siblings: " + theFile.getSiblingCount() + "\n";
					
					outputString += "The Parent: " + theFile.getParent() + "\n";
					
					outputString += "Next Node: " + theFile.getNextNode() + "\n";
					
					outputString += "Previous Node: " + theFile.getPreviousNode() + "\n";
					
					outputString += "\nChildren of Node\n";
					
					for(Enumeration enumValue = theFile.children(); enumValue.hasMoreElements();)
					{
						outputString += enumValue.nextElement() + "\n";
					}
					
					outputString += "\nPath from Root\n";
					
					TreeNode[] pathNodes = theFile.getPath();
					
					for(TreeNode individualNodes: pathNodes)
					{
						outputString += individualNodes + "\n";
					}
					
					JOptionPane.showMessageDialog(Tutorial27.this,  outputString, "Information", JOptionPane.INFORMATION_MESSAGE);
					
					outputString = "";
					
				}	
				catch(NumberFormatException excep)
				{
					
				}
			}
		}		
	}
	
	private DefaultMutableTreeNode addAFile(String fileName, DefaultMutableTreeNode parentFolder)
	{
		DefaultMutableTreeNode newFile = new DefaultMutableTreeNode(fileName);
		parentFolder.add(newFile);
		
		return newFile;
		
	}

}
=========================================================================== Tutorial 28
import javax.swing.*;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;

public class Tutorial28 extends JFrame
{
	JButton button1, button2, button3, button4, button5;
	
	String outputString = "";

	public static void main(String[] args) 
	{
		new Tutorial28();
	}
	
	public Tutorial28()
	{
			// Define the size of the JFrame
		this.setSize(400, 400);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Eighth Frame Tutorial");
		
			//
		JPanel panel = new JPanel();
		
		// panel.setLayout(new FlowLayout(FlowLayout.LEFT));
		
			// FlowLayout.WHICHEVER, horizontalGap, verticalGap
		panel.setLayout(new FlowLayout(FlowLayout.RIGHT, 75, 20));
		
		button1 = new JButton("Button 1");
		
		button2 = new JButton("Button 2");
		
		panel.add(button1);
		
		panel.add(button2);
		
			// How to use BorderLayout
		panel.setLayout(new BorderLayout());
		
			// Create the buttons to correspond to the locations
		button1 = new JButton("Button 1");
		button2 = new JButton("Button 2");
		button3 = new JButton("Button 3");
		button4 = new JButton("Button 4");
		button5 = new JButton("Button 5");
		
			// North, West, East, South, Center
		// panel.add(button1, BorderLayout.NORTH);
		
		// panel.add(button2, BorderLayout.WEST);
		
		// panel.add(button3, BorderLayout.EAST);
		
		// panel.add(button4, BorderLayout.SOUTH);
		
			// Center will always be the largest
		// panel.add(button5, BorderLayout.CENTER);
		
		JPanel panel2 = new JPanel();
		
		panel2.add(button1);
		
		panel2.add(button2);
		
		panel.add(panel2, BorderLayout.NORTH);
		
		this.add(panel);
		
		this.setVisible(true);

	}

}

-------------------------------------------------------------
-------------------------------------------------------------


import javax.swing.*;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;

public class Tutorial28_2 extends JFrame
{
	JButton button1, button2, button3, button4, button5;
	
	String outputString = "";

	public static void main(String[] args) 
	{
		new Tutorial28_2();
	}
	
	public Tutorial28_2()
	{
			// Define the size of the JFrame
		this.setSize(400, 400);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Eighth Frame Tutorial");
		
			// Define the box
		Box theBox = Box.createHorizontalBox();
		
		button1 = new JButton("Button 1");
		button2 = new JButton("Button 2");
		button3 = new JButton("Button 3");
		button4 = new JButton("Button 4");
		button5 = new JButton("Button 5");
		
		/*
		theBox.add(button1);
		theBox.add(Box.createHorizontalStrut(20));
		theBox.add(button2);
		theBox.add(Box.createHorizontalStrut(20));
		theBox.add(button3);
		theBox.add(Box.createHorizontalStrut(20));
		theBox.add(button4);
		*/
		
		/*
		theBox.add(button1);
		theBox.add(Box.createHorizontalStrut(20));
		theBox.add(button2);
		theBox.add(Box.createHorizontalGlue());
		theBox.add(button3);
		*/
		
		theBox.add(button1);
		theBox.add(Box.createHorizontalStrut(20));
		theBox.add(button2);
		theBox.add(Box.createRigidArea(new Dimension(5, 50)));
		theBox.add(button3);
		
		this.add(theBox);
		
		this.setVisible(true);

	}

}

=========================================================================== Tutorial 29

import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;

import javax.swing.*;

public class Tutorial29 extends JFrame
{
	JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, bPlus, bMinus, clearAll;
	
	JTextField textResult;
	
	int num1, num2;
	
	public static void main(String[] args) 
	{
		new Tutorial29();
	}
	
	public Tutorial29()
	{
			// Define the size of the JFrame
		this.setSize(400, 400);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Calculator");
		
			// Create the panel
		JPanel panel = new JPanel();
		
		/*
			// Create the grid layout
			// (asManyRowsAsNeeded = 0, columns, horz gap, vert gap)
		panel.setLayout(new GridLayout(0, 3, 2, 2));
		
		b1 = new JButton("1");
		b2 = new JButton("2");
		b3 = new JButton("3");
		b4 = new JButton("4");
		b5 = new JButton("5");
		b6 = new JButton("6");
		b7 = new JButton("7");
		b8 = new JButton("8");
		b9 = new JButton("9");
		b0 = new JButton("0");
		bPlus = new JButton("+");
		bMinus = new JButton("-");
		clearAll = new JButton("Clear All");
		
		panel.add(b1);
		panel.add(b2);
		panel.add(b3);
		panel.add(b4);
		panel.add(b5);
		panel.add(b6);
		panel.add(b7);
		panel.add(b8);
		panel.add(b9);
		panel.add(b0);
		panel.add(bPlus);
		panel.add(bMinus);
		panel.add(clearAll);		
		
		*/
		
		panel.setLayout(new GridBagLayout());
		
		GridBagConstraints gridC = new GridBagConstraints();
		
		gridC.gridx = 1;
		
		gridC.gridy = 1;
		
		gridC.gridwidth = 1;
		
		gridC.gridheight = 1;
		
		gridC.weightx = 50;
		
		gridC.weighty = 100;
		
		gridC.insets = new Insets(5,5,5,5);
		
		gridC.anchor = GridBagConstraints.CENTER;
		
		gridC.fill = GridBagConstraints.BOTH;
		
		textResult = new JTextField("0", 20);
		
		Font font = new Font("Helvetica", Font.PLAIN, 18);
		
		textResult.setFont(font);
		
		b1 = new JButton("1");
		b2 = new JButton("2");
		b3 = new JButton("3");
		b4 = new JButton("4");
		b5 = new JButton("5");
		b6 = new JButton("6");
		b7 = new JButton("7");
		b8 = new JButton("8");
		b9 = new JButton("9");
		b0 = new JButton("0");
		bPlus = new JButton("+");
		bMinus = new JButton("-");
		clearAll = new JButton("Clear All");
		
		panel.add(clearAll, gridC);
		gridC.gridwidth = 20;
		gridC.gridx = 5;
		panel.add(textResult, gridC);
		gridC.gridwidth = 1;
		gridC.gridx = 1; 
		gridC.gridy = 2;
		
		panel.add(b1, gridC);
		gridC.gridx = 5;
		panel.add(b2, gridC);
		gridC.gridx = 9;
		panel.add(b3, gridC);
		gridC.gridx = 1; 
		gridC.gridy = 3;
		panel.add(b4, gridC);
		gridC.gridx = 5;
		panel.add(b5, gridC);
		gridC.gridx = 9;
		panel.add(b6, gridC);
		gridC.gridx = 1; 
		gridC.gridy = 4;
		panel.add(b7, gridC);
		gridC.gridx = 5;
		panel.add(b8, gridC);
		gridC.gridx = 9;
		panel.add(b9, gridC);
		gridC.gridx = 1; 
		gridC.gridy = 5;
		panel.add(b0, gridC);
		gridC.gridx = 5;
		panel.add(bPlus, gridC);
		gridC.gridx = 9;
		panel.add(bMinus, gridC);
		
		
		this.add(panel);
		
		this.setVisible(true);
	}

}

=========================================================================== Tutorial 30

import java.util.Calendar;
import java.util.Date;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;

@SuppressWarnings("serial")
public class Tutorial30 extends JFrame
{
	JLabel nameLabel, streetLabel, stateLabel, dateLabel,
		ageLabel, sexLabel, optionsLabel, aboutLabel;	
	JTextField nameText, streetText;	
	JComboBox stateList;	
	JSpinner dateSpin;	
	JSlider ageSlider;	
	JRadioButton maleRadio, femaleRadio;	
	ButtonGroup sexGroup;	
	JCheckBox morningCheck, afternoonCheck, eveningCheck;	
	JTextArea aboutYou;

	public static void main(String[] args) 
	{
			// Call the constructor
		new Tutorial30();
	}
	
	public Tutorial30()
	{
			// Define the size of the JFrame
		this.setSize(800, 800);
		
			// Opens the JFrame in the middle of the screen
		this.setLocationRelativeTo(null);
		
			// Define the exit criteria for the JFrame
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// Set the title
		this.setTitle("Random Layout");
		
			// Create the panel
		JPanel panel = new JPanel();
		
			// set the panel layout
		panel.setLayout(new GridBagLayout());
		
			// initialize the nameLabel 
		nameLabel = new JLabel("   Name: ");	
		
			// This is a private method created below
			// takes in the 
			// (panel, component, x position, y position, component width, component height, layout place, layout stretch)
			// Add the nameLabel to the panel
		addComponent(panel, nameLabel, 0, 0, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE);
			
			// Create a textField with 30 characters
		nameText = new JTextField(30);
		
			// Add the nameText to the panel using the created method
		addComponent(panel, nameText, 1, 0, 2, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);
		
			// Street label
		streetLabel = new JLabel("   Street: ");
		
			// add the street label to the panel
		addComponent(panel, streetLabel, 0, 1, 1, 1, GridBagConstraints.EAST, GridBagConstraints.NONE);
		
			// Create a text field for the stree text
		streetText = new JTextField(30);
		
			// Add streetText to the panel 
		addComponent(panel, streetText, 1, 1, 2, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);
		
			// Check boxes are best if they are grouped
			// Create a sexBox Box (vertical)
		Box sexBox = Box.createVerticalBox();
			
			// Create male and female radio buttons
		maleRadio = new JRadioButton("Male");		
		femaleRadio = new JRadioButton("Female");	
		
			// initialize the ButtonGroup
		sexGroup = new ButtonGroup();	
		
			// Add the male and female buttons to the sexGroup
		sexGroup.add(maleRadio);		
		sexGroup.add(femaleRadio);		
		
			// Add the radio buttons to the sexBox
		sexBox.add(maleRadio);		
		sexBox.add(femaleRadio);		
		
			// set the box with a border
		sexBox.setBorder(BorderFactory.createTitledBorder("Sex"));		
		
			// add the box to the panel
		addComponent(panel, sexBox, 3, 0, 2, 1, GridBagConstraints.WEST, GridBagConstraints.NONE);
		
			// Create a separate panel for the states
		JPanel statePanel = new JPanel();
		
			// Using the flowLayout for the state panel
		statePanel.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 0));
		
		stateLabel = new JLabel("State");
		
		statePanel.add(stateLabel);
		
			// Create array to hold the states
		String[] states = {"Ga", "Tn", "Mi", "Il"};
		
			// add the states array to the combo box
		stateList = new JComboBox(states);
		
			// add the combo box to the actual states panel
		statePanel.add(stateList);
		
		dateLabel = new JLabel("Appointment Date");
		
		statePanel.add(dateLabel);
		
			// Create a Date object
		Date todaysDate = new Date();
		
			// instantiate the spinner object
			// (default date, minimum, maximum, and how the spinner will increment)
		dateSpin = new JSpinner(new SpinnerDateModel(todaysDate, null, null, Calendar.DAY_OF_MONTH));
		
			// DateEditor handles the displaying and editing of dates 
		JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(dateSpin, "dd/mm/yy");
		
			// set the editor for dateSpin object
		dateSpin.setEditor(dateEditor);
		
			// add the spinner to the states panel
		statePanel.add(dateSpin);
		
			// instantiate the age label
		ageLabel = new JLabel("Age: 50");
		
			// add the age label to the state panel
		statePanel.add(ageLabel);
		
			// instantiate the jslider
			// (minimumValue, maximumValue, startingValue)
		ageSlider = new JSlider(1, 100, 50);
		
			// Create a ListenForSlider object
			// we will create the method below like in the previous tutorials
		ListenForSlider lforSlider = new ListenForSlider();
		
			// add the changeListener to the slider
		ageSlider.addChangeListener(lforSlider);
		
			// add the slider to the states panel
		statePanel.add(ageSlider);
		
			// add the statePanel components to the original panel
		addComponent(panel, statePanel, 1, 2, 5, 1, GridBagConstraints.EAST, GridBagConstraints.NONE);
		
			// initialize the check boxes
		morningCheck = new JCheckBox("Morning");		
		afternoonCheck = new JCheckBox("Afternoon");		
		eveningCheck = new JCheckBox("Evening");
		
			// create a box for the check boxes
		Box optionBox = Box.createVerticalBox();
		
			// add the check boxes to the Box
		optionBox.add(morningCheck);		
		optionBox.add(afternoonCheck);		
		optionBox.add(eveningCheck);
		
			// Add a border to the box
		optionBox.setBorder(BorderFactory.createTitledBorder("Time of Day"));
		
			// add the Box to the panel
		addComponent(panel, optionBox, 1, 3, 2, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE);
		
		
		aboutYou = new JTextArea(6, 40);		
		aboutYou.setText("Tell us something about yourself, mate");		
		
			// If text will not fit on a line, jump to a new line
		aboutYou.setLineWrap(true);		
		
			// Ensure the words will not separate in the middle if
			// a new line situation occurs
		aboutYou.setWrapStyleWord(true);;
		
			// Add a scrollbar to the textArea
		JScrollPane scrollBar1 = new JScrollPane(aboutYou, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		
		addComponent(panel, scrollBar1, 2, 3, 3, 1, GridBagConstraints.EAST, GridBagConstraints.NONE);
		
			// This will add the panel to the current object
		this.add(panel);
		
			// this will adjust the size of the jframe to best fit the components
		this.pack();
		
			// Allow the user to resize the window (true) , or not (false)
		this.setResizable(false);
		
			// This must be true in order for the jframe to be seen
		this.setVisible(true);
	}
	
	
		// private methode addComponent will handle components for the grid bag layout
		// This can be tedious work, which is why a method should be created
		// The idea is to work smart, not hard
		// Be as abstract as possible, I'm not very abstract with my tutorials
		// But I try to cover and comment as much as possible
		
	private void addComponent(JPanel panel, JComponent component, int xPos, int yPos, int componentWidth, int componentHeight, int place, int strectch)
	{
		GridBagConstraints gCon = new GridBagConstraints();
		
		gCon.gridx = xPos;
		gCon.gridy = yPos;
		gCon.gridwidth = componentWidth;
		gCon.gridheight = componentHeight;
		gCon.weightx = 100;
		gCon.weighty = 100;
		gCon.insets = new Insets(5,5,5,5);
		gCon.anchor = place;
		gCon.fill = strectch;
		
		panel.add(component, gCon);
		
	}
	
		// The method is called once the slider has been moved
		// It will modify the age on the label from the initial value of 50
		// to whatever it needs to be set at

	private class ListenForSlider implements ChangeListener
	{
		public void stateChanged(ChangeEvent e) 
		{
			if(e.getSource() == ageSlider)
			{
				ageLabel.setText("AGE: " + ageSlider.getValue());
			}
		}
		
	}
}

=========================================================================== Tutorial 31

import java.io.*;

import javax.swing.*;

public class Tutorial31  extends JFrame
{
	
	static String filePath, filePath2, parentDirectory;
	
	static File randomDir, randomFile, randomFile2;

	public static void main(String[] args) 
	{
			// Create a file object inside of memory
		randomDir = new File("/Users/James/Desktop/Java/tutorial_31");
		
			// Create a working directory
		randomDir.mkdir();
		
			// create a file named random.txt
		randomFile = new File("random.txt");
		
			// create a file; define where the file will be saved
		randomFile2 = new File("/Users/James/Desktop/Java/tutorial_31/random2.txt");
		
			// The following is a required process when using the File class
		try
		{
				// create the files within the system
			randomFile.createNewFile();
			randomFile2.createNewFile();
			
				// the path for the files
			filePath = randomFile.getCanonicalPath();
			filePath2 = randomFile2.getCanonicalPath();	
		}
		catch(IOException e)
		{
			System.out.println("Error: " + e.getMessage() + " : " + e.getStackTrace());
			
		}
		
			// The system needs to check if the file was created or exists
			// within the system before it can use any methods or calls
			// otherwise, an exception could occur or worse, failure. 
		if(randomFile.exists() && randomFile2.exists())
		{
				//
			System.out.println("=============================================");
			System.out.println("Files do exist\n");
			System.out.println("File names - File 1: " 
								+ randomFile.getName() + " , File 2: " 
								+ randomFile2.getName() + ".\n");
			System.out.println("Files are Readable - randomFile: " 
								+ randomFile.canRead() + " , randomFile2: " 
								+ randomFile2.canRead() + ".\n");
			System.out.println("Files are Writable - randomFile: " 
								+ randomFile.canWrite() + " , randomFile2: " 
								+ randomFile2.canWrite() + ".\n");
			System.out.println("File locations - randomFile: " 
								+ filePath + " , randomFile2: " 
								+ filePath2 + ".\n");			
			System.out.println("=============================================");
				
				// The following code will return a null
				// we did not define a parent directory
			System.out.println("Parent Directory: " + randomFile.getParent());			
			
				// This will return the parent directory 
				// because we did define the parent directory
			parentDirectory = randomFile2.getParent();
			
				// 
			System.out.println("File 2 Parent Directory: " + parentDirectory + "\n");
			System.out.println("Is this a directory: " + randomDir.isDirectory() + "\n");
			
			System.out.println("=============================================");
			
				// create a String array to contain all of the files
			String[] filesInDir = randomDir.list();
			
			System.out.println("Files in the Random Directory\n");
			
				// Use the enhanced for loop
			for (String fileName : filesInDir)
			{
				System.out.println(fileName + "\n");
			}
			
				// You can check to see if this is a file
			System.out.println("Is this a file: " + randomFile.isFile() + "\n");
			
				// You can check for hidden files
			System.out.println("Is this a hidden file: " + randomFile.isHidden() + "\n");
			
				// Check to see when last modified
			System.out.println("Last modified: " + randomFile.lastModified() + "\n");
			
				// Return the actual size of a file
			System.out.println("The size of the file: " + randomFile.length() + "\n");
			
				// To change the name of the file
				// You will need the path 
			randomFile2.renameTo(new File("/Users/James/Desktop/Java/tutorial_31/random3.txt"));
			
				// Print out the full path for the new file
			System.out.println("New File Full Path: " + randomFile2.toString() + "\n");
			
				// Print out the absolute path
			System.out.println("New File Absolute Path: " + randomFile2.getAbsolutePath() + "\n");
			
			new Tutorial31();
			
		} 
		else
		{
			System.out.println("The File simply does not exist, Mate.\n");
		}
		
			// You can use the delete method to delete a file
		if(randomFile.delete())
		{
			System.out.println("File 1: Deleted\n");
		}
		
			// If you wanted to get an array of File objects from the directory
		File[] filesInDir = randomDir.listFiles();
		
			// Use enhanced for loop to delete all File objects present
		for (File fileN : filesInDir)
		{
			fileN.delete();
		}
		
			// You can only effectively remove a directory
			// if that directory is empty
		if (randomDir.delete())
		{
			System.out.println("Directory was successfully removed, mate.\n");
		}
	}	
	
		// END OF THE MAIN FUNCTION
	public Tutorial31()
	{
			// create a file chooser at the specified location
		JFileChooser fileChooser = new JFileChooser(randomDir);
		
			// Opens the file chooser
		fileChooser.showOpenDialog(this);
	}
		// END OF THE CLASS
}
=========================================================================== Tutorial 32

import java.io.*;

public class Tutorial32 
{
	public static void main(String[] args) 
	{ 
			// Create a customers array of type Customer and set it equal to a method
			// we haven't created the method yet, but we will define it below
		Customer[] customers = getCustomers();
		
			// used to write characters to a file
			// You need to define the createFile method yourself
			// Create a folder on your desktop called Java, open it, and get the path
			// in the search bar from the folder. It should look something like 
			// C:\Users\ userName\Desktop\Java -> use the foward slashes instead, and drop the HD
			// /Users/userName/Desktop/Java
		PrintWriter custOutput = createFile("/Users/James/Desktop/Java/customers.txt");
		
			// This will cycle through the people in customers
		for(Customer person : customers)
		{
				// method that will be defined to create a customer easily
			createCustomers(person, custOutput);
		}
		
			// Closes the connection to the PrintWriter
		custOutput.close();
		
			// A method we will create to print out the information on screen from file
		getFileInfo();
		
	}

		// A Customer class to define all the individual customer fields
	private static class Customer
	{
			// it is good practice to create fields as abstract as possible
			// Less is more when it comes to programming, with the exception
			// of comments. Comments are valuable beyond measure
		public String firstName, lastName;
		
			// An integer value to hold the customer's age
		public int custAge;
		
			// This is a constructor that will be called every time a customer 
			// object is created. The customer object will have the information
			// passed to the Customer constructor. 
		public Customer(String firstName, String lastName, int custAge)
		{
				// the this key word assigns the information passed to the current object
				// being created. 
			this.firstName = firstName;
			this.lastName = lastName;
			this.custAge = custAge;
		}
	}
	
			// This method will create the array of Customer objects
		private static Customer[] getCustomers()
		{
			Customer[] customers = new Customer[5];
			customers[0] = new Customer("James", "Patterson", 31);
			customers[1] = new Customer("Jill", "Hardin", 52);
			customers[2] = new Customer("Kyle", "Earley", 32);
			customers[3] = new Customer("Johnathon", "Miles", 32);
			customers[4] = new Customer("Daniel", "Rogers", 32);
			
			return customers;
		}

			// Used to create and write to files on the system
		private static PrintWriter createFile(String fileName)
		{
				// Must be encased within a try/catch block
				// IOException could occur, and must be caught
			try
			{
					// Create a File object that will let you read write and delete
					// files on the hard drive
				File listOfNames = new File(fileName);
				
					// FileWriter is used to write streams of chars to a file
					// BufferedWriter renders a lot of chars at once, to speed
					// up the process, and PrintWriter is used to write the chars
					// to the actual file we created
				
				PrintWriter infoToWrite = new PrintWriter(
												new BufferedWriter(
													new FileWriter(listOfNames)));
				return infoToWrite;
			}	// Must be caught when using FileWriter
			catch(IOException e)
			{
				System.out.println("An I/O Error Occurred.");
				
					// Closes the java program
				System.exit(0);
			}
			return null;
		}
		
			// Creates a string with customer information, and writes the info to a file
		private static void createCustomers(Customer customer, PrintWriter custOutput)
		{
				// Create the String with the customer info that is a data type String
			String custInfo = customer.firstName + " " + customer.lastName + " ";
			
				// to add the age, you must parse the data to String data type
			custInfo += Integer.toString(customer.custAge);
			
				// Writes the string to the actual file
				// println is used for so much more than print to the console
			custOutput.println(custInfo);
		}
		
			// This method will read the information from the file
			// and write it to the screen/console for us
		private static void getFileInfo()
		{
			System.out.println("Info written to the file\n");
			
			File listOfNames = new File("/Users/James/Desktop/Java/customers.txt");
			
			try
			{
					// BufferedReader speeds up the process of reading characters
					// FileReader going to read each individual character
				BufferedReader getInfo = new BufferedReader(new FileReader(listOfNames));
				
					// Create a custInfo String that will hold the value from 
					// each line being read in
					// Only reads one line at a time
					// last thing sent to read line is null
				String custInfo = getInfo.readLine();
				
					// The following will just print the info out		
					// I'm going to comment this out
				/*
				while(custInfo != null)
				{
					System.out.println(custInfo);
					custInfo = getInfo.readLine();
				}				
				*/
				
				while(custInfo != null)
				{
						// This will break lines into pieces
					String[] individualCustData = custInfo.split(" ");
					
						// Convert the age String into an integer with parseInt
						// 0: firstName	1: lastName	2: age
					int custAge = Integer.parseInt(individualCustData[2]);
					
						// Print out the data 
					System.out.println("Customer: " + individualCustData[0] + " " + 
						individualCustData[1] + " is " + custAge + " years old.\n");
					
						// This ensures that java will grab any additional lines
						// in the file we are trying to access
						// returns null when the end of file has been reached
					custInfo = getInfo.readLine();
				}
				
			}
			catch(FileNotFoundException e)
			{
				System.out.println("Couldn't find the file. ");
				System.exit(0);
			}
			catch(IOException e)
			{
				System.out.println("An I/O Exception has occurred");
				System.exit(0);
			}
		}
		
		
}

=========================================================================== Tutorial 33

import java.io.*;

public class Tutorial33 
{
	
	public static void main(String[] args) 
	{
			// Let us create an array with type Customer
			// The array will be set equal to a method
			// which will populate our customers array with customers
		Customer[] customers = getCustomers();
		
			// A DataOutputStream will allow the user to print primitive
			// data types to a specific file
		DataOutputStream custOutput = createFile("/Users/James/Desktop/Java/customers2.dat");
		
			// The enhanced for loop will help cycle through all of the customers in the
			// customer array
		for(Customer person : customers)
		{
			createCustomers(person, custOutput);
		}
		
			// Next we need to definitely close the connection to the data stream
		try
		{
			custOutput.close();
		}
		catch(IOException e)
		{
			System.out.println("An I/O Error Occurred.");
			
			System.exit(0);
		}
		
			// This method will get the primitive data on file
			// and display it on the console for the user
		getFileInfo();
	}
	
		// This user created class will define the fields for the customers
	private static class Customer
	{
		public String customerName;
		public int customerAge;
		public double customerDebt;
		public boolean oweMoney;
		public char customerGender;
		
			// Create the constructor for when a customer is made
		public Customer(String customerName, int customerAge, double customerDebt, boolean oweMoney, char customerGender)
		{
			this.customerName = customerName;
			this.customerAge = customerAge;
			this.customerDebt = customerDebt;
			this.oweMoney = oweMoney;
			this.customerGender = customerGender;
		}
	}
	
		// We need to create an array of Customer objects
	private static Customer[] getCustomers()
	{
			// Create the actual array with 5 indexes
		Customer[] customers = new Customer[5];
		
		customers[0] = new Customer("James Patterson", 31, 1.25, true, 'M');
		customers[1] = new Customer("Jill Hardin", 52, 2.25, true, 'F');
		customers[2] = new Customer("Earl Rittenhouse", 78, 0, false, 'M');
		customers[3] = new Customer("Brian Anderson", 35, 3.25, true, 'M');
		customers[4] = new Customer("Japhia L", 27, 5.25, true, 'F');	
		
			// we need to return the array
		return customers;		
	}
	
		// Now we need to create the actual file
		// and create the DataOutputStream that will write to the actual file
	private static DataOutputStream createFile(String fileName)
	{
		try
		{
				// You must create a File object that will allow you to work with files
				// there is no difference between File for characters or binary stream
				// writing/reading
			File listOfNames = new File(fileName);
			
				/* FileOutStream is used to write streams of data to a file
				 * 		FileOutStream(fileName, true) will append to the file
				 * 		FileOutStream(fileName, false) will create a new file
				 * 
				 * BufferedOutputStream will gather all of the data at once
				 * 		and write to the file for quicker processing
				 * 
				 * DataOutputStream is only used to write primitive data to the file				 * 
				 */
			DataOutputStream infoToWrite = new DataOutputStream(
					new BufferedOutputStream(
							new FileOutputStream(listOfNames)));
			
				// You will want to return the actual DataOutputStream file
			return infoToWrite;
		}
		
			// This needs to be caught when using a FileOutputStream
		catch(IOException e)
		{
			System.out.println("An I/O Exception has occurred");
			System.exit(0);
		}
		return null;
	}
	
	
		// This method will create a String, and write the string to a file predefined
	private static void createCustomers(Customer customer, DataOutputStream custOutput)
	{
		try
		{
				// first, try to write the primitive data to the file
			custOutput.writeUTF(customer.customerName);
			
				// write the integer value
			custOutput.writeInt(customer.customerAge);
			
				// write the debt
			custOutput.writeDouble(customer.customerDebt);
				
				// write the boolean value for the debt
			custOutput.writeBoolean(customer.oweMoney);
			
				// write the character associated with gender
			custOutput.writeChar(customer.customerGender);
			
				// writeByte, writeLong, writeShort, and writeFloat
				// are all legit options that can be used when dealing
				// with data output streams
					
		}
		catch(IOException e)
		{
			System.out.println("An I/O Exception has occurred");
			System.exit(0);
		}
	}
	
		// The following method will just read the information stored on the file
		// and display it nicely for the user of the console
	private static void getFileInfo()
	{
		System.out.println("Info Written to the File");
		
			// Open connection to the file
		File listOfNames = new File("/Users/James/Desktop/Java/customers2.dat");
		
			// create a boolean to flip once the end of file has been reached
		boolean eof = false;
		
		/* DataInputStream
		 * 		has the methods required to read the binary data
		 * 
		 * BufferedInputStream
		 * 		will gather the data all at once in blocks
		 * 
		 * FileInputStream
		 * 		accesses the binary data from the file
		 */
		try
		{
			DataInputStream getInfo = new DataInputStream(
					new BufferedInputStream(
							new FileInputStream(listOfNames)));
			
				// Use a while loop, and pull the data until a EOFException is triggered
			while (!eof)
			{
				String customerName = getInfo.readUTF();
				int customerAge = getInfo.readInt();
				double customerDebt = getInfo.readDouble();
				boolean oweMoney = getInfo.readBoolean();
				char customerGender = getInfo.readChar();
				
				System.out.print(customerName + " ");
				System.out.print(customerAge + " ");
				System.out.print(customerDebt + " ");
				System.out.print(oweMoney + " ");
				System.out.print(customerGender + " ");
				System.out.print(" \n");
				
			}
		}
		catch(EOFException e)
		{
			eof = true;
		}		
		catch(FileNotFoundException e)
		{
			System.out.println("File could not be Found");
			System.exit(0);
		}
		catch(IOException e)
		{
			System.out.println("An I/O Exception has occurred");
			System.exit(0);
		}
	}
}
=========================================================================== Tutorial 34

import java.sql.*;

public class Tutorial34 
{

	public static void main (String[]args)
	{
			// DB's always start with a connection object
		Connection conn = null;
		
		try
		{
				// The Driver allows for querying of the DB 
				// forName will dynamically load the Class for you
			Class.forName("com.mysql.jdbc.Driver");
			
				// DriverManager is used to handle the JDBC drivers
				// getConnection will establish a connection to the DB
				// ("jdbc:mysql://localhost/schemaName", "userName", "passWord")
			conn = DriverManager.getConnection("jdbc:mysql://localhost/customers", "root", "admin");
			
				// Statement objects execute a SQL query on the DB
				// createStatement will return a statement object
			Statement sqlStatement = conn.createStatement();
			
				// This is the String in which I'm going to query the DB with
			String selectStatement = "SELECT first_name FROM CUSTOMER";
			
				// ResultSet is a table of data from the results of the SQL query
				// It can not be changed once it is been queried. 
				// The progression can only be read in one direction
			ResultSet rows = sqlStatement.executeQuery(selectStatement);
			
				// use a while loop to loop through the results of the query
				// next will loop through until null is returned
			while(rows.next())
			{
				System.out.println(rows.getString("first_name"));
				
			}
		}
		catch(SQLException e)
		{
			System.out.println("SQLException: " + e.getMessage());
			System.out.println("VendorException: " + e.getErrorCode());
		}
		catch(ClassNotFoundException e)
		{	
				// This will execute if the driver can't be found
			e.printStackTrace();
		}
		
	}	
}

/*
 * SQL 
 * 		First, Creat a folder on your desktop for all of the java files you download
 * 		Download and Install MySQL Workbench
 * 			https://dev.mysql.com/downloads/workbench/
 * 
 * 		Second, Download and Install MySQL connectors for java
 * 			https://dev.mysql.com/downloads/connector/j/
 * 
 * 		Third, In Eclipse, right click on the folder in which the java file 
 * 			you're working on is located in and click BUILD PATH
 * 			-> Configure Build Path -> then libraries tab
 * 			-> add external jars -> Find the connector.jar file you downloaded
 * 			in step 2. 
 * 
 * 		CREATE SCHEMA 'CUSTOMERS' ;
 * 
 * 		USE CUSTOMERS;
 * 
 * 		CREATE TABLE CUSTOMER((first_name, last_name, age, email, website);
 * 
 * 		INSERT INTO CUSTOMER (first_name, last_name, age, email, website)
		VALUES ("James", "Patterson", 31, "jpatte95@students.kennesaw.edu", "jpatte95.pythonanywhere.com");
 * 
 * 		INSERT INTO CUSTOMER (first_name, last_name, age, email)
		VALUES ("Jill", "Hardin", 52, "jill@mom.com");
 * 
 * 		SELECT * FROM CUSTOMERS;
 * 
 * 		SELECT * FROM CUSTOMERS WHERE first_name = "James";
 */

=========================================================================== Tutorial 35

/* DATABASE SQL QUERIES FOR LAHMAN591 DB
 * First, You will need to import the database 
 * 	if you're on a PC, open up the windows button/search for CMD
 * 	Type this in ->   cd C:\
 * 	cd Program Files
 * 	cd MySQL
 *  cd MySQL Server version.version
 *  cd bin
 *  mysql -u userName -p < /root/to/the/lahman591.sql
 *  enter your password for your localhost
 *  
 *  while your SQL cmd prompt is up
 *  SHOW DATABASES; 
 *  	will show you the databases present, and lahman2016 should be there
 *  USE lahman2016;
 *  	will set the database you're currently using to lahman2016
 *  
 *  
				select s.yearID, s.teamID, 
				SUM(s.salary) AS SALARY, 
				t.W as WINS, 
				SALARY/t.W as COSTPERWIN
				FROM salaries s, teams t
				WHERE s.yearID = 2002 AND s.teamID = t.teamID
				AND s.yearID = t.yearID
				GROUP BY s.teamID
				ORDER BY SALARY DESC;
		
		Top 25 players with the Most RBI's 
			runs credited to a batter based on their at bats
		
				select b.playerID, 
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				SUM(b.RBI) AS RBI
				FROM Batting b, Master m
				WHERE b.playerID = m.playerID
				group by playerID
				order by RBI desc
				limit 25;
				
		Top 25 players with the most HR's
			Homeruns credited to a batter based on their at bats
				
				select b.playerID, 
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				SUM(b.HR) AS HR
				FROM Batting b, Master m
				WHERE b.playerID = m.playerID
				group by playerID
				order by HR desc
				limit 25;
				
		Top 25 players with the best batting average
			
				select b.playerID, 
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				SUM(b.AB) AS AB,
				(sum(b.h)/sum(b.AB)) as AVG
				FROM Batting b, Master m
				WHERE b.playerID = m.playerID
				group by playerID
				having AB > 1000 #make sure At bats are over 1000
				order by AVG desc
				limit 25;
				
		Top 25 players with the highest on base percentage
				
				select b.playerID, 
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				SUM(b.AB) AS AB,
				(sum(b.h)/sum(b.AB)) as AVG,
				(sum(b.H)+sum(b.BB)+sum(b.HBP))/(sum(b.AB)+sum(b.BB)+sum(b.HBP)+COALESCE(sum(b.SF), 0)) as OBP
				FROM batting b, master m
				WHERE b.playerID = m.playerID
				group by playerID
				having AB > 1000 #make sure At bats are over 1000
				order by OBP desc
				limit 25;
 		and
 		with their positions available, set as a row called POSITIONS
 		
 				select b.playerID, 
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				SUM(b.AB) AS AB,
				(sum(b.h)/sum(b.AB)) as AVG,
				(sum(b.H)+sum(b.BB)+sum(b.HBP))/(sum(b.AB)+sum(b.BB)+sum(b.HBP)+COALESCE(sum(b.SF), 0)) as OBP, 
				f.POS as POSITION
				FROM batting b, master m, Fielding f
				WHERE b.playerID = m.playerID and b.playerID = f.playerID
				group by playerID
				having AB > 1000 #make sure At bats are over 1000
				order by OBP desc
				limit 25;
				
		Top 50 players with top On Base Percentage per 2002
		
				select b.playerID, 
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				(sum(b.h)/sum(b.AB)) as AVG,
				b.AB as AB, (b.H/b.AB) AS AVG. (b.H+b.BB+b.HBP)/(b.AB+b.BB+b.HBP+COALESCE(b.SF, 0)) as OBP,
				f.POS as POSITION,
				s.salary,
				b.yearID
				FROM batting b, master m, Fielding f, Salaries s
				WHERE b.playerID = m.playerID and b.playerID = f.playerID and b.yearID = 2002 and 
				s.playerID = b.playerID and s.yearID = b.yearID
				group by playerID
				having AB > 300 #make sure At bats are over 300
				order by OBP desc
				limit 50;
				
		Top 50 Sluggers 
				
				select b.playerID,
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				sum(b.AB) as AB, 
				(sum(b.H)/sum(b.AB)) as AVG,
				(sum(b.H)+(sum(b.2B)*2)+(sum(b.3B)*3)+(sum(b.HR)*4))/sum(b.AB) as SLG
				from batting b, master m
				where b.playerID = m.playerID
				group by playerID
				having AB > 1000
				order by SLG desc
				limit 50;
				
				
				select p.playerID,
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				sum(p.ER)/sum(p.IPOuts/3)*9 as ERA,
				sum(p.IPOuts/3) as IP,
				m.birthYear as BirthYear
				from pitching p, master m
				where p.playerID = m.playerID
				group by playerID
				having (IP >= 1000) and (BirthYear > 1900)
				order by ERA desc
				limit 50;
				
				
				
				create view TOTALBASES AS 
				select playerID,
				(sum(H)+(sum(2B)*2)+(sum(3B)*3)+(sum(HR)*4)) as TB
				from batting
				group by playerID;
				
				show full tables in lahman591 where table_type like 'view';
				
				
				
				select b.playerID,
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				((b.H+b.BB)+(2.4*(b.AB+b.BB)))*(t.TB+(3*(b.AB+b.BB)))/(9*(b.AB+b.BB))-(.9*(b.AB+b.BB)) AS TTRC
				from batting b, master m TOTALBASES AS t
				where b.playerID = m.playerID and t.playerID = m.playerID
				group by playerID
				order by TTRC desc
				limit 50;
				
				select playerID. TB from TOTALBASES;
				
				create view TOTALBYR as 
				select playerID, yearID
				(H+(2B*2)+(3B*3)+(HR*4)) as TB
				from batting;
				
				
				select playerID, TB from TOTALBYR
				where yearID = 2010
				order by TB desc
				limit 50;
				
				
				
				select b.yearID, b.playerID,
				CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,  ((b.H+b.BB)+(2.4*(b.AB+b.BB)))*(t.TB+(3*(b.AB+b.BB)))/(9*(b.AB+b.BB))-(.9*(b.AB+b.BB)) AS TTRC
				FROM Batting b, Master m, TOTALBYR as t
				WHERE b.playerID = m.playerID AND t.playerID = m.playerID
				AND b.yearID = t.yearID AND t.yearID = 2011 # Every year or just 2010
				ORDER BY TTRC DESC 
				LIMIT 50;
				
				
				
				
				// SHOW ALL VIEWS IN DATABASE
				SHOW FULL TABLES
				IN bbstats
				WHERE TABLE_TYPE LIKE 'VIEW';
				
				
				
				//DELETE A DATABASE VIEW
				drop view databaseView;
				
				
				//BATTING AVERAGE ON BALLS IN PLAY (A Players Skill at Getting Hits)
				SELECT b.playerID, CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				yearID, teamID,
				(b.H-b.HR)/(b.AB-b.SO-b.HR+b.SF) AS BABIP
				FROM batting b, Master m
				WHERE b.playerID = m.playerID AND b.yearID = 2011 AND b.AB > 300
				ORDER BY BABIP DESC
				LIMIT 50;
				
				
				
				 //Weighted On Base Average or wOBA (OBP doesn't weight for how far they reached base. SLG doesn't consider walks)
				 
				SELECT b.playerID, CONCAT(m.nameFirst, " ", m.nameLast) AS NAME,
				yearID, teamID,
				(.72*(b.BB-b.IBB))+(.75*b.hbp)+(.90*b.h)+(1.84)+(1.24*b.2b)+(1.56*b.3b)+(1.95*b.hr)/b.ab AS wOBA
				FROM batting b, Master m
				WHERE b.playerID = m.playerID AND b.yearID = 2011 AND b.AB > 300
				ORDER BY wOBA DESC
				LIMIT 50;
 */
=========================================================================== Tutorial 36
import java.awt.BorderLayout;
import java.awt.Font;
import java.sql.*;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/*
 * 
 * 	You MUST run this SQL function to create the totalbyr view
 * 
 				create view TOTALBYR as 
				select playerID, yearID,
				(H+(2B*2)+(3B*3)+(HR*4)) as TB
				from batting; 
 */

public class Tutorial36 
{
		// This mulidimensional array will hold the column data for players
	static Object[][] databaseInfo;
	
		// column titles for the JTable
	static Object[] columns = {"Year", "PlayerID", "Name", "TTRC", "Team", "Salary", "CPR", "POS"};

		// a result set will contain a table filled with data from our query
	static ResultSet rows;
	
		// result meta data is information on the results of the query
	static ResultSetMetaData metaData;
	
		// DTM defines the methods JTable uses, and we need to override one of them
	static DefaultTableModel dTableModel = new DefaultTableModel(databaseInfo, columns)
	{
		public Class getColumnClass(int column)
		{
			Class returnValue;
			
				// This is verifying that the columns exist
			if((column >= 0) && (column < getColumnCount()))
			{
				returnValue = getValueAt(0, column).getClass();
			} 
			else
			{
					// return the class of the Object in the column
				returnValue = Object.class;
			}
			return returnValue;
		}		
	};	
	
	public static void main(String[] args) 
	{
		JFrame frame = new JFrame();
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// create the mysql connection object
		Connection conn = null;
		
		try
		{
				// this will allow you to connect and query a database with java
				// JDBC Driver
				// There are other alternatives, but MySQL is free and easy to use
			Class.forName("com.mysql.jdbc.Driver");
			
				// Driver Manager handles the JDBC drivers for the DB connection
				// getConnection will establish the connection to the DB
				// 		the db must be up and running on MySQL
				// ("jdbc:mysql://localhost/lahman591", "userName", "passWord")
			conn = DriverManager.getConnection("jdbc:mysql://localhost/lahman591", "root", "admin");
		
				// This is the statement object
				// statement objects execute SQL queries 
				// create statement will return a statement object from our Connection object
			Statement sqlStatement = conn.createStatement();
			
				// This the LONG SQL query
				// Best to just copy and paste it
			String selectStuff = "select b.yearID, b.playerID, " +
                    "CONCAT(m.nameFirst, ' ', m.nameLast) AS Name, " +
                    "((b.H+b.BB)+(2.4*(b.AB+b.BB)))*(t.TB+(3*(b.AB+b.BB)))/(9*(b.AB+b.BB))-(.9*(b.AB+b.BB)) AS TTRC, " +
                    "b.teamID AS Team, s.salary AS Salary, " +
                    "CAST( s.salary/(((b.H+b.BB)+(2.4*(b.AB+b.BB)))*(t.TB+(3*(b.AB+b.BB)))/(9*(b.AB+b.BB))-(.9*(b.AB+b.BB))) as decimal(10,2)) AS CPR, " +
                    "f.POS AS POS FROM Batting b, Master m, Salaries s, totalbyr t, Fielding f " +
                    "WHERE b.playerID = m.playerID AND t.playerID = m.playerID " +
                    "AND t.yearID = 2010 AND b.yearID = t.yearID AND s.playerID = b.playerID " +
                    "AND s.yearID = b.yearID AND b.AB > 50 AND b.playerID = f.playerID " +
                    "AND b.playerID = t.playerID GROUP BY b.playerID ORDER BY TTRC DESC LIMIT 200;";
		
				// rows will contain the data from our SQL query
				// so, set rows equal to our execute command
			rows = sqlStatement.executeQuery(selectStuff);
			
				// will hold the row results temporarily
			Object[] tempRow;
			
				// rows.next will iterate through the information
				// tempRow will break the data into individual data types
				// rows is returned as a big string, but not all the information
				// are Strings. We need to parse individually, the rows being returned
			while(rows.next())
			{
				tempRow = new Object[]{rows.getInt(1), rows.getString(2), 
						rows.getString(3), rows.getDouble(4), rows.getString(5),
						rows.getInt(6), rows.getDouble(7), rows.getString(8)};
				
					// add the rows to the default table model
				dTableModel.addRow(tempRow);				
			}			
		}
		catch(SQLException e)
		{	
			System.out.println(e.getMessage());			
		}
		catch(ClassNotFoundException e)
		{
				// If the driver cannot be found
			System.out.println(e.getMessage());			
		}
		
		JTable table = new JTable(dTableModel);
		
			// Add 10 pixels to the height of your data
		table.setRowHeight(table.getRowHeight() + 10);
		
			// Easy way to set font
		table.setFont(new Font("Serif", Font.PLAIN, 20));
		
			// Allows for easy sorting of the data
		table.setAutoCreateRowSorter(true);
		
			// Disable autoresize to be off
		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		
		
			// Set Width for columns individual or let fate do the work
		TableColumn col1 = table.getColumnModel().getColumn(0);
		
		col1.setPreferredWidth(100);		
		
		TableColumn col2 = table.getColumnModel().getColumn(1);
		
		col2.setPreferredWidth(190);
		
		TableColumn col3 = table.getColumnModel().getColumn(2);
		
		col3.setPreferredWidth(400);
		
		TableColumn col5 = table.getColumnModel().getColumn(4);
		
		col5.setPreferredWidth(200);
		
		TableColumn col6 = table.getColumnModel().getColumn(5);
		
		col6.setPreferredWidth(200);
		
			//Changing the justification to Center
		TableColumn tc = table.getColumn("Team");
		
		CenterTableCellRenderer centerRenderer = new CenterTableCellRenderer();
		
		tc.setCellRenderer(centerRenderer);		
		
		tc = table.getColumn("POS");
		
		centerRenderer = new CenterTableCellRenderer();
		
		tc.setCellRenderer(centerRenderer);
		
		JScrollPane scrollPane = new JScrollPane(table);
		
		frame.add(scrollPane, BorderLayout.CENTER);
		
		frame.setSize(800, 500);
		
		frame.setVisible(true);
				
	}
}
	
	class CenterTableCellRenderer extends DefaultTableCellRenderer
	{
		public CenterTableCellRenderer()
		{
			setHorizontalAlignment(JLabel.CENTER);
		}
	}
	
	class RightTableCellRenderer extends DefaultTableCellRenderer
	{
		public RightTableCellRenderer()
		{
			setHorizontalAlignment(JLabel.RIGHT);
		}
	}
=========================================================================== Tutorial 37
/*
 * Download theses
 * 	1. newthinktank.com/mysql-files/create_president.sql
 * 	2. newthinktank.com/mysql-files/insert_president.sql
 * Save to Java folder on desktop, or wherever
 * First, open up CMD window and cd to your mysql server folder
 * type in
 * 
 * 	mysql -u example_user -p --database=samp_db < drag and drop file here 
 * 
 * and hit enter for both sql files
 */

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

//The API for accessing and processing data stored in a database

import java.sql.*;
import java.text.ParseException;

// Allows you to convert from string to date or vice versa

import java.text.SimpleDateFormat;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class Tutorial37 extends JFrame
{
	
		// Labels that will be used within the JFrame
	static JLabel lFirstName, lLastName, lState, lBirthDate;
	
		// JTextFields that will be used
	static JTextField tfFirstName, tfLastName, tfState, tfBirthDate;
	
		// You can create instances like this
	static java.util.Date dateBirthDate, sqlBirthDate;
	
		// Holds row values for the table	
	static Object[][] databaseResults;
	
		// Holds column names for the table
	static Object[] columns = {"First Name", "Last Name", "State", "Birth Date"};
	
		// DefaultTableModel defines the methods JTable will use
	    // I'm overriding the getColumnClass	
    static DefaultTableModel dTableModel = new DefaultTableModel(databaseResults, columns)
    {
        public Class getColumnClass(int column)
        {
            Class returnValue;
            
            	// Verifying that the column exists (index > 0 && index < number of columns            
            if ((column >= 0) && (column < getColumnCount())) 
            {
              returnValue = getValueAt(0, column).getClass();
            } 
            else 
            {            	
            	// Returns the class for the object in the column	            	
              returnValue = Object.class;
            }
            return returnValue;
          }
        };
        
        	// Create a JTable using the custom DefaultTableModel        
        static JTable table = new JTable(dTableModel);
	
	public static void main(String[] args){
		
		JFrame frame = new JFrame();
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		// A connection object is used to provide access to a database    	
    	Connection conn = null;
    	
        try 
        {
	            // The driver allows you to query the database with Java
	        	// forName dynamically loads the class for you           
            Class.forName("com.mysql.jdbc.Driver");
            
	            // DriverManager is used to handle a set of JDBC drivers
	            // getConnection establishes a connection to the database
	            // You must also pass the userid and password for the database            
            conn = DriverManager.getConnection("jdbc:mysql://localhost/samp_db","root","admin");
            
	            // Statement objects executes a SQL query
	            // createStatement returns a Statement object            
            Statement sqlState = conn.createStatement();
            
            	// This will hold the query we will send to DB
            String selectStuff = "Select first_name, last_name, state, birth from president";
            
	            // A ResultSet contains a table of data representing the
	            // results of the query. It can not be changed and can 
	            // only be read in one direction            
            ResultSet rows = sqlState.executeQuery(selectStuff);
            
            	// Temporarily holds the row results            
            Object[] tempRow;
            
            	// next is used to iterate through the results of a query 
            	// until null is returned
            while(rows.next()){
            		
            		// You need to define each row returned
            		// The rows are numbered starting at 1, not 0
            	tempRow = new Object[]{rows.getString(1), rows.getString(2), 
            							rows.getString(3), rows.getDate(4)};
            	
            	
            	/* You can also get other types
            	 * int getInt()
            	 * boolean getBoolean()
            	 * double getDouble()
            	 * float getFloat()
            	 * long getLong()
            	 * short getShort()
            	 */
            	
            		// Add the tempRow's to the default table model
            	dTableModel.addRow(tempRow);
            }
        } 
        
        catch (SQLException ex) 
        {
            
        		// String describing the error        	
            System.out.println("SQLException: " + ex.getMessage());
            
            	// Vendor specific error code            
            System.out.println("VendorError: " + ex.getErrorCode());
        } 
        
        catch (ClassNotFoundException e) 
        {
				// Executes if the driver can't be found
			e.printStackTrace();
		} 
        
        	// Increase the font size for the cells in the table        
        table.setFont(new Font("Serif", Font.PLAIN, 26));
        
        	// Increase the size of the cells to allow for bigger fonts        
        table.setRowHeight(table.getRowHeight()+16);
        
        	// Allows the user to sort the data	    
	    table.setAutoCreateRowSorter(true);
	    
	    	// Adds the table to a scrollpane	    
	    JScrollPane scrollPane = new JScrollPane(table);
	    
	    	// Adds the scrollpane to the frame	    
	    frame.add(scrollPane, BorderLayout.CENTER);
	    
		    // Creates a button that when pressed executes the code
		    // in the method actionPerformed	    
	    JButton addPres = new JButton("Add A President");
	    
	    addPres.addActionListener(new ActionListener()
	    {
	    
	    	public void actionPerformed(ActionEvent e)
	    	{
	    		
	    		String sFirstName = "", sLastName = "", sState = "", sDate = "";
	    		
	    			// getText returns the value in the text field	    		
	    		sFirstName = tfFirstName.getText();
	    		sLastName = tfLastName.getText();
	    		sState = tfState.getText();
	    		sDate = tfBirthDate.getText();
	    		
	    			// Will convert from string to date	    		
	    		SimpleDateFormat dateFormatter = new SimpleDateFormat("YYYY-MM-DD");
	    		
	    		try 
	    		{
					dateBirthDate = dateFormatter.parse(sDate);
					sqlBirthDate = new java.sql.Date(dateBirthDate.getTime());
				} 
	    		catch (ParseException e1) 
	    		{					
					e1.printStackTrace();
				}
	    		
	    		Object[] president = {sFirstName, sLastName, sState, sqlBirthDate};
	    		dTableModel.addRow(president);	    		
	    	}	    	
	    });
	    
	    JButton removePres = new JButton("Remove President");
	    
	    removePres.addActionListener(new ActionListener()
	    {	    	
	    	public void actionPerformed(ActionEvent e)
	    	{	    		
	    			// Will remove which ever row that is selected	    		
	    		dTableModel.removeRow(table.getSelectedRow());	    		
	    	}	    	
	    });
	    
	    	// Define values for my labels	    
	    lFirstName = new JLabel("First Name");
	    lLastName = new JLabel("Last Name");
	    lState = new JLabel("State");
	    lBirthDate = new JLabel("Birthday");
	    
	    	// Define the size of text fields	    
	    tfFirstName = new JTextField(15);
	    tfLastName = new JTextField(15);
	    tfState = new JTextField(2);
	    
	    	// Set default text and size for text field	    
	    tfBirthDate = new JTextField("yyyy-MM-dd", 10);
	    
	    	// Create a panel to hold editing buttons and fields	    
	    JPanel panel = new JPanel();
	    
	    	// Put components in the panel	    
	    panel.add(lFirstName);
	    panel.add(tfFirstName);
	    panel.add(lLastName);
	    panel.add(tfLastName);
	    panel.add(lState);
	    panel.add(tfState);
	    panel.add(lBirthDate);
	    panel.add(tfBirthDate);
	    panel.add(addPres);
	    panel.add(removePres);
	    
	    	// Add the component panel to the frame	    
	    frame.add(panel, BorderLayout.SOUTH);
	    
	    frame.setSize(1300, 700);
	    frame.setVisible(true);
		
	}
	
}
=========================================================================== Tutorial 38
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

	// Needed to track when the user clicks on a table cell
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

	//The API for accessing and processing data stored in a database
import java.sql.*;
import java.text.ParseException;

	// Allows you to convert from string to date or vice versa
import java.text.SimpleDateFormat;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;



public class Tutorial38 extends JFrame
{	
	static JLabel lFirstName, lLastName, lState, lBirthDate;
	
	static JTextField tfFirstName, tfLastName, tfState, tfBirthDate;
	
	static java.util.Date dateBirthDate, sqlBirthDate;
	
	static ResultSet rows;
	
		// Holds row values for the table	
	static Object[][] databaseResults;
	
		// Holds column names for the table	
	static Object[] columns = {"ID", "First Name", "Last Name", "State", "Birth Date"};
	
		// DefaultTableModel defines the methods JTable will use
	    // I'm overriding the getColumnClass	
    static DefaultTableModel dTableModel = new DefaultTableModel(databaseResults, columns)
    {
        public Class getColumnClass(int column) 
        {
            Class returnValue;
            
            	// Verifying that the column exists (index > 0 && index < number of columns
            if ((column >= 0) && (column < getColumnCount())) {
              returnValue = getValueAt(0, column).getClass();
            } else {
            	
            	// Returns the class for the item in the column	            	
              returnValue = Object.class;
            }
            return returnValue;
          }
        };
        
        // Create a JTable using the custom DefaultTableModel        
    static JTable table = new JTable(dTableModel);
	
	public static void main(String[] args)
	{
		
		JFrame frame = new JFrame();
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// A connection object is used to provide access to a database    	
    	Connection conn = null;
    	
        try 
        {
	            // The driver allows you to query the database with Java
	        	// forName dynamically loads the class for you           
            Class.forName("com.mysql.jdbc.Driver");
            
	            // DriverManager is used to handle a set of JDBC drivers
	            // getConnection establishes a connection to the database
	            // You must also pass the userid and password for the database            
            conn = DriverManager.getConnection("jdbc:mysql://localhost/samp_db","root","admin");
            
	            // Statement objects executes a SQL query
	            // createStatement returns a Statement object            
            Statement sqlState = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
            		ResultSet.CONCUR_UPDATABLE);
            
            	// This is the query I'm sending to the database            
            String selectStuff = "Select pres_id, first_name, last_name, state, birth from president";
            
	            // A ResultSet contains a table of data representing the
	            // results of the query. It can not be changed and can 
	            // only be read in one direction            
            rows = sqlState.executeQuery(selectStuff);
            
            	// Temporarily holds the row results            
            Object[] tempRow;
            
            	// next is used to iterate through the results of a query            
            while(rows.next())
            {            	
            	tempRow = new Object[]{rows.getInt(1), rows.getString(2), rows.getString(3), rows.getString(4), rows.getDate(5)};
            	            	
            	/* You can also get other types
            	 * int getInt()
            	 * boolean getBoolean()
            	 * double getDouble()
            	 * float getFloat()
            	 * long getLong()
            	 * short getShort()
            	 */
            	
            	// Add the row of data to the JTable
            	
            	dTableModel.addRow(tempRow);
            }
        }         
        catch (SQLException ex) 
        {            
        		// String describing the error        	
            System.out.println("SQLException: " + ex.getMessage());
            
            	// Vendor specific error code            
            System.out.println("VendorError: " + ex.getErrorCode());
        } 
        
        catch (ClassNotFoundException e) 
        {
				// Executes if the driver can't be found
			e.printStackTrace();
		} 
        
        	// Increase the font size for the cells in the table        
        table.setFont(new Font("Serif", Font.PLAIN, 26));
        
        	// Increase the size of the cells to allow for bigger fonts        
        table.setRowHeight(table.getRowHeight()+16);
        
        	// Allows the user to sort the data	    
	    table.setAutoCreateRowSorter(true);
	    
	    	// Adds the table to a scrollpane	    
	    JScrollPane scrollPane = new JScrollPane(table);
	    
	    	// Adds the scrollpane to the frame	    
	    frame.add(scrollPane, BorderLayout.CENTER);
	    
		    // Creates a button that when pressed executes the code
		    // in the method actionPerformed	    
	    JButton addPres = new JButton("Add President");
	    
	    addPres.addActionListener(new ActionListener()
	    {	    
	    	public void actionPerformed(ActionEvent e)
	    	{
	    		
	    		String sFirstName = "", sLastName = "", sState = "", sDate = "";
	    		
	    			// getText returns the value in the text field	    		
	    		sFirstName = tfFirstName.getText();
	    		sLastName = tfLastName.getText();
	    		sState = tfState.getText();
	    		sDate = tfBirthDate.getText();
	    		
	    		sqlBirthDate = getADate(sDate);
	    		
	    		try 
	    		{
	    			
	    				// Moves the database to the row where data will be placed	    			
					rows.moveToInsertRow();
					
						// Update the values in the database					
					rows.updateString("first_name", sFirstName);
					rows.updateString("last_name", sLastName);
					
					rows.updateString("state", sState);
					rows.updateDate("birth", (Date) sqlBirthDate);
					
						// Inserts the changes to the row values in the database					
					rows.insertRow();
					
						// Directly updates the values in the database					
					rows.updateRow();
				} 
	    		catch (SQLException e1) 
	    		{
					
					e1.printStackTrace();
				}
	    		
	    		int presID = 0;
	    		
	    		try 
	    		{	    			
	    				// Go to the last row inserted and get the id	    			
					rows.last();
					presID = rows.getInt(1);
				} 
	    		catch (SQLException e1) 
	    		{					
					e1.printStackTrace();
				}
	    		
	    		Object[] president = {presID, sFirstName, sLastName, sState, sqlBirthDate};
	    		
	    			// Add the row of values to the JTable	    		
	    		dTableModel.addRow(president);	    		
	    	}	    	
	    });
	    
	    JButton removePres = new JButton("Remove President");
	    
	    removePres.addActionListener(new ActionListener()
	    {	    	
	    	public void actionPerformed(ActionEvent e)
	    	{	    		
	    			// Will remove which ever row that is selected	    		
	    		dTableModel.removeRow(table.getSelectedRow());
	    		
	    		try {
	    			
	    				// Moves the database to the row currently selected
	    				// getSelectedRow returns the row number for the selected row	    			
					rows.absolute(table.getSelectedRow());
					
						// Deletes the selected row from the database					
					rows.deleteRow();
				} catch (SQLException e1) 
	    		{
					e1.printStackTrace();
				}	    		
	    	}	    	
	    });
	    
	    	// Define values for my labels	    
	    lFirstName = new JLabel("First Name");
	    lLastName = new JLabel("Last Name");
	    lState = new JLabel("State");
	    lBirthDate = new JLabel("Birthday");
	    
	    	// Define the size of text fields	    
	    tfFirstName = new JTextField(15);
	    tfLastName = new JTextField(15);
	    tfState = new JTextField(2);
	    
	   		// Set default text and size for text field	    
	    tfBirthDate = new JTextField("yyyy-MM-dd", 10);
	    
	    	// Create a panel to hold editing buttons and fields	    
	    JPanel inputPanel = new JPanel();
	    
	    	// Put components in the panel	    
	    inputPanel.add(lFirstName);
	    inputPanel.add(tfFirstName);
	    inputPanel.add(lLastName);
	    inputPanel.add(tfLastName);
	    inputPanel.add(lState);
	    inputPanel.add(tfState);
	    inputPanel.add(lBirthDate);
	    inputPanel.add(tfBirthDate);
	    inputPanel.add(addPres);
	    inputPanel.add(removePres);
	    
	    	// Add the component panel to the frame	    
	    frame.add(inputPanel, BorderLayout.SOUTH);
	    
	    	// When the user clicks on a cell they'll be able to change the value	    
	    table.addMouseListener(new MouseAdapter()
	    {  
	    	public void mouseReleased(MouseEvent me)
	    	{
	            String value = JOptionPane.showInputDialog(null,"Enter Cell Value:"); 
	            
	            	// Makes sure a value is changed only if OK is clicked	            
	            if (value != null)  
	            {  
	                table.setValueAt(value, table.getSelectedRow(), table.getSelectedColumn());  
	            }  
	            

	            try 
	            {
	            		// Move to the selected row	            	
	            	rows.absolute(table.getSelectedRow()+1);
	            	
	            		// Get the name of the selected column		            
		            String updateCol = dTableModel.getColumnName(table.getSelectedColumn());
	            	
		            	// Previous to Java 1.7 you couldn't use Strings in a Switch
		            	// If you get an error here it is because you aren't using Java 1.7	            	
	            	switch (updateCol) 
	            	{
	            	
	            			// Uses a different update method depending on the data type	            	
	            		case "birth":
	            			sqlBirthDate = getADate(value);
	            			rows.updateDate(updateCol, (Date) sqlBirthDate);

	    					rows.updateRow();
	            			break;
	            		
	            		default: 
	            			rows.updateString(updateCol, value);
	            			System.out.println("Current Row: " + rows.getRow());
	            			
	    					rows.updateRow();
	            			break;	            			
	            	}     
				} 
	            catch (SQLException e) 
	            {
					// Commented out so the user can delete rows
					// e.printStackTrace();
				} 
	    	} 
	    });  
	    
	    frame.setSize(1200, 500);
	    frame.setVisible(true);
		
	}
	
		// Will convert from string to date	
	public static java.util.Date getADate(String sDate)
	{		
		SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
		
		try 
		{
			dateBirthDate = dateFormatter.parse(sDate);
			sqlBirthDate = new java.sql.Date(dateBirthDate.getTime());
		} catch (ParseException e1) 
		{			
			e1.printStackTrace();
		}		
		return sqlBirthDate;		
	}	
}

/*
 * ALTER TABLE president
   ADD COLUMN pres_id INT AUTO_INCREMENT NOT NULL FIRST,
   ADD PRIMARY KEY(pres_id);
   
   alter table president modify city varchar(20); # Allow city to be NULL
   
   delete from president where pres_id = 42;
 */
=========================================================================== Tutorial 39

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

	// Used for when a URL doesn't start with http://
import java.net.MalformedURLException;
import java.net.URL;

	// Basic HTML display, a hyped up JTextField
	// Does not work well with CSS
	// Not javascript
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

	// Offers information on events triggered by the hyperlinks
import javax.swing.event.HyperlinkEvent;

	// Monitors the hyperLink activity
import javax.swing.event.HyperlinkListener;

public class Tutorial39 extends JFrame implements HyperlinkListener, ActionListener
{

	public static void main(String[] args) 
	{
		new Tutorial39("file:///Users/James/Desktop/Java/index.html");
	}
	
		// This will hold our default URL
	String defaultURL;
	
		// The panel for which our information will be stored
	JPanel toolPanel = new JPanel();
	
		// JTextfield
	JTextField theURL = new JTextField(25);
	
		// JEditorPane will display basic HTML pages
		// Does not understand JS or CSS
	JEditorPane htmlPage;
	
		// Let us create our Constructor for our class object	
	public Tutorial39(String defaultURL)
	{
		JFrame frame = new JFrame("Java Browser");		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
			// set the current object's defaultURL to the URL being passed in
		this.defaultURL = defaultURL;
		
			// Add a actionListener to the URL
			// If a user interacts with the JTextField, this will trigger
		theURL.addActionListener(this);
		
			// set defaultText in theURL
		theURL.setText(defaultURL);
		
			// add theURL to the panel
		toolPanel.add(theURL);
		
			// add the panel to the frame
			// with a BorderLayout positioned NORTH
			// CENTER, EAST, WEST, SOUTH, NORTHWEST, NORTHEAST... 
			// are all acceptable options
		frame.add(toolPanel, BorderLayout.NORTH);
		
		try
		{
				// create a JEditorPane object from the defaultURL passed
			htmlPage = new JEditorPane(defaultURL);
			
				// add the HyperLinkListener to the htmlPage being 
				// displayed by the JEditorPane
			htmlPage.addHyperlinkListener(this);
			
				// Do Not allow people to edit the HTML
				// Unles you own the site, and true random strangers
			htmlPage.setEditable(false);
			
				// Add a scrollPane to be able to scroll through the information
			JScrollPane scroller = new JScrollPane(htmlPage);
			
				// add the scroll bar to the frame
			frame.add(scroller, BorderLayout.CENTER);
					
		}	
			// Called when something goes wrong with the html page
		catch(IOException e)
		{
			e.printStackTrace();
		}
		
			// Set size of the frame
		frame.setSize(1400, 800);
			
			// Ensure the frame is VISIBLE
		frame.setVisible(true);		
	}

		// The following are defined methods that will be called
		// once a Action has been performed or a HyperLink action has been performed
	@Override
	public void actionPerformed(ActionEvent e) 
	{
			// Set the pageURL to an empyty String
		String pageURL = "";
		
			// This will get the object that triggered the event
		if(e.getSource() == theURL)
		{
				// Get the text from the JTextField; theURL
			pageURL = theURL.getText();
						
		}
		else
		{
			JOptionPane.showMessageDialog(Tutorial39.this, 
					"Please, Enter a proper web page", 
					"Error", JOptionPane.ERROR_MESSAGE);					
		}
		
		try 
		{
			htmlPage.setPage(new URL(pageURL));
			theURL.setText(pageURL);
		} 
		catch (MalformedURLException | IOException e1) 
		{
			JOptionPane.showMessageDialog(Tutorial39.this, 
					"Please use http://", 
					"Error", JOptionPane.ERROR_MESSAGE);
		}				
	}

	@Override
	public void hyperlinkUpdate(HyperlinkEvent e) 
	{
			// This will check to see if the link has been clicked on
			// ENTERED ->	checks for hoovering
			// EXITED  ->	checks for leaving link
		
		if(e.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
		{
			try 
			{
					// sets the URL that will be displayed through JEditorPane
					// getURL will get the url for the htmlPage link
				htmlPage.setPage(e.getURL());
			} 
			catch (IOException e1) 
			{
				e1.printStackTrace();
			}
			theURL.setText(e.getURL().toExternalForm());
		}		
	}
}

=========================================================================== Tutorial 40
import javax.swing.*;
import javax.swing.border.Border;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.*;


	// JApplet allows java to work online
public class Tutorial40 extends JApplet
{
		// Declare a panel to hold everything
	JPanel panel;
		
		// Declare individual panels to hold the radio buttons
	JPanel q1, q2, q3, q4;
	
		// Declare the button to display the personality report
	JButton getResultButton;
	
		// Declare the radio buttons for the personality associated with each
	JRadioButton extravertRadio, introvertRadio, 
		sensorRadio, intuitiveRadio, feelerRadio, 
		thinkerRadio, judgingRadio, perceivingRadio;

		// will hold the information for the personality report
	JEditorPane yourReport;
	
		// With JApplet's an init() method is used instead of main
	public void init()
	{
			// will set the size of the current frame
		this.setSize(675, 870);
		
			// instantiate the JPanel with the FlowLayout justified left
		panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		
			// instantiate the panels that will hold the radio buttons
		q1 = new JPanel();
		q2 = new JPanel();
		q3 = new JPanel();
		q4 = new JPanel();
		
			// Will create four individual borders that surround the radio buttons
		Border border1 = BorderFactory.createTitledBorder("Do you prefer to work");
		Border border2 = BorderFactory.createTitledBorder("Which is most important");
		Border border3 = BorderFactory.createTitledBorder("Do you act on");
		Border border4 = BorderFactory.createTitledBorder("Which do you prefer");
		
			// appends the borders to the associated panels
		q1.setBorder(border1);
		q2.setBorder(border2);
		q3.setBorder(border3);
		q4.setBorder(border4);
		
			// ensures only one button per group can be selected
		ButtonGroup group1 = new ButtonGroup();
		ButtonGroup group2 = new ButtonGroup();
		ButtonGroup group3 = new ButtonGroup();
		ButtonGroup group4 = new ButtonGroup();
		
			// Instantiate the new radio buttons with proper text associated with each
		extravertRadio = new JRadioButton("In groups");
		introvertRadio = new JRadioButton("On your own");
		sensorRadio = new JRadioButton("The specifics");
		intuitiveRadio = new JRadioButton("The big picture");
		feelerRadio = new JRadioButton("What feels right");
		thinkerRadio = new JRadioButton("List of facts");
		judgingRadio = new JRadioButton("To plan");
		perceivingRadio = new JRadioButton("To adapt");
		
			// Will set some radio buttons to true by default
		extravertRadio.setSelected(true);
		sensorRadio.setSelected(true);
		feelerRadio.setSelected(true);
		judgingRadio.setSelected(true);
		
			// will add the radio buttons to the proper panel
		q1.add(extravertRadio);
		q1.add(introvertRadio);
		q2.add(sensorRadio);
		q2.add(intuitiveRadio);
		q3.add(feelerRadio);
		q3.add(thinkerRadio);
		q4.add(judgingRadio);
		q4.add(perceivingRadio);
		
			// Assigns the radio buttons to be grouped together
		group1.add(extravertRadio);
		group1.add(introvertRadio);
		group2.add(sensorRadio);
		group2.add(intuitiveRadio);
		group3.add(feelerRadio);
		group3.add(thinkerRadio);
		group4.add(judgingRadio);
		group4.add(perceivingRadio);
		
			// appends the radio button panels to the main panel
		panel.add(q1);
		panel.add(q2);
		panel.add(q3);
		panel.add(q4);
		
			// Instantiate a new Button
		getResultButton = new JButton("Get Results");
		
			// Instantiation of the object that will monitor button clicks
			// GetResultsListener() constructor needs to be defined below
		GetResultsListener buttonListener = new GetResultsListener();
		
			// add the Action Listener event to the GetResultsListener object
		getResultButton.addActionListener(buttonListener);
		
			// add the Listener to the panel
		panel.add(getResultButton);
			
			// ensures which panel will be used with the current object
		this.add(panel);
		
			// ensures the JApplet will be visible
		this.setVisible(true);
		
	}
	
		// Will be executed once the button is clicked
	class GetResultsListener implements ActionListener
	{

		@Override
		public void actionPerformed(ActionEvent e) 
		{			
			String pageToOpen = "", 
			
			directoryLocation = "file:///Users/James/workspace/tutorial/src/tutorial_40/";
			
			String textToDisplay = "<html><div><img src=\"" + directoryLocation;

			if(e.getSource() == getResultButton)
			{
				if(extravertRadio.isSelected()) pageToOpen += "E";
				if(introvertRadio.isSelected()) pageToOpen += "I";
				if(sensorRadio.isSelected()) pageToOpen += "S";
				if(intuitiveRadio.isSelected()) pageToOpen += "N";
				if(feelerRadio.isSelected()) pageToOpen += "F";
				if(thinkerRadio.isSelected()) pageToOpen += "T";
				if(judgingRadio.isSelected()) pageToOpen += "J";
				if(perceivingRadio.isSelected()) pageToOpen += "P";
				
				panel.remove(q1);
				panel.remove(q2);
				panel.remove(q3);
				panel.remove(q4);
				
				textToDisplay += pageToOpen + ".png" + "\" /></html>";
				
				yourReport = new JEditorPane("text/html", textToDisplay);
				
				yourReport.setEditable(false);
				
				yourReport.setSize(650, 825);
				
				JScrollPane scroller = new JScrollPane(yourReport, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
				
				scroller.setPreferredSize(new Dimension(650, 825));
				
				panel.add(scroller);
				
				getResultButton.setVisible(false);
				
				panel.revalidate();
				
				panel.repaint();			
			}			
		}		
	}
}
=========================================================================== Tutorial 41

=========================================================================== Tutorial 42

=========================================================================== Tutorial 43

=========================================================================== Tutorial 44

=========================================================================== Tutorial 45

=========================================================================== Tutorial 46

=========================================================================== Tutorial 47

=========================================================================== Tutorial 48

=========================================================================== Tutorial 49

=========================================================================== Tutorial 50

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

===========================================================================

